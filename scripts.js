//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü¢ JS PARTIE 1
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// V√©rifier l'authentification
async function checkAuthentication() {
    // V√©rifier l'authentification locale
    const isLocalAuthenticated = localStorage.getItem('isAuthenticated') === 'true';
    
    if (isLocalAuthenticated) {
        // L'utilisateur est authentifi√© localement
        const authContainer = document.getElementById('authContainer');
        if (authContainer) {
            authContainer.remove();
        }
        
        // Charger les donn√©es
        await loadDataFromSupabase();
        return true;
    }
    
    return false;
}



        // Donn√©es de d√©monstration
window.sampleData = [
    {
        id: 'demo-1',
        category: "Pens√©es",
        type: "chat",
        title: "L'importance de la gratitude quotidienne",
        date: "2025-02-06",
        description: null,
        images: ["üó®Ô∏è", "üí≠", "üí¨"],
        tags: ["d√©veloppement personnel", "mindfulness", "gratitude"],
        priority: "high"
    },
    {
        id: 'demo-2',
        category: "Objectifs",
        type: "note",
        title: "Apprendre la programmation quantique",
        date: "2025-02-05",
        description: "Exploration des concepts fondamentaux de l'informatique quantique et √©tablissement d'un plan d'apprentissage structur√©.",
        images: ["üìù", "üìÑ", "üìÉ"],
        tags: ["apprentissage", "technologie", "science"],
        priority: "medium"
    },
    {
        id: 'demo-3',
        category: "Apprentissage",
        type: "dossier",
        title: "Documentation IA",
        date: "2025-02-04",
        description: null,
        images: ["üìÅ", "üìÇ", "üóÇÔ∏è"],
        tags: ["organisation", "documentation", "apprentissage"],
        priority: "low"
    }
];


        // Fonction pour g√©rer le filtrage par cat√©gorie
        function filterContentByCategory(category) {
    const grid = document.getElementById('contentGrid');
    const chatContainer = document.getElementById('chatContainer');
    const noteContainer = document.getElementById('noteContainer');
    const folderContainer = document.getElementById('folderContainer');
    const identityContainer = document.getElementById('identityContainer');
    
    // Masquer tous les conteneurs par d√©faut
    grid.style.display = 'none';
    chatContainer.style.display = 'none';
    noteContainer.style.display = 'none';
    folderContainer.style.display = 'none';
    identityContainer.style.display = 'none';

    if (category === 'Identity') {
        identityContainer.style.display = 'block';
        initializeIdentityContent(); // Initialiser le contenu dynamique
    } else if (category === 'universe') {
        grid.style.display = 'grid';
        grid.innerHTML = ''; // R√©initialiser le contenu
        sampleData.forEach(data => {
            grid.innerHTML += createContentCard(data);
        });
        attachCardClickHandlers();
    } else {
        // Filtrer par cat√©gorie
        grid.style.display = 'grid';
        grid.innerHTML = ''; // R√©initialiser le contenu
        const filteredData = sampleData.filter(data => data.category === category);
        filteredData.forEach(data => {
            grid.innerHTML += createContentCard(data);
        });
        attachCardClickHandlers();
    }
    
    // Mettre √† jour les compteurs et l'ordre des √©l√©ments
    updateCategoryCounts();

    // **Ajoutez la ligne suivante :**
    toggleCreationHubVisibility();
}


function toggleCreationHubVisibility() {
    const creationHub = document.querySelector('.creation-hub');
    const chatContainer = document.getElementById('chatContainer');
    const noteContainer = document.getElementById('noteContainer');
    const folderContainer = document.getElementById('folderContainer');
    const identityContainer = document.getElementById('identityContainer');

    // V√©rifiez si l'une des interfaces est visible
    if (
        chatContainer.style.display === 'block' ||
        noteContainer.style.display === 'block' ||
        folderContainer.style.display === 'block' ||
        identityContainer.style.display === 'block'
    ) {
        creationHub.style.display = 'none';
    } else {
        creationHub.style.display = 'flex'; // Remettre visible si aucune interface n'est affich√©e
    }
}


// Fonction pour mettre √† jour les compteurs de cat√©gories
function updateCategoryCounts() {
    // Compter les √©l√©ments par cat√©gorie
    const categoryCounts = {};
    sampleData.forEach(item => {
        categoryCounts[item.category] = (categoryCounts[item.category] || 0) + 1;
    });
    
    // Mettre √† jour les compteurs dans la navigation
    document.querySelectorAll('.nav-item').forEach(item => {
        const category = item.dataset.category;
        if (category !== 'universe' && category !== 'Identity') {
            const count = categoryCounts[category] || 0;
            
            // Ajouter ou mettre √† jour le compteur
            let countBadge = item.querySelector('.count-badge');
            if (!countBadge && count > 0) {
                countBadge = document.createElement('div');
                countBadge.className = 'count-badge';
                item.appendChild(countBadge);
            }
            
            if (countBadge) {
                if (count > 0) {
                    countBadge.textContent = count;
                    countBadge.style.display = 'flex';
                } else {
                    countBadge.style.display = 'none';
                }
            }
        }
    });
}




        // Fonction pour associer les gestionnaires de clic aux cartes
        function attachCardClickHandlers() {
            document.querySelectorAll('.content-card').forEach(card => {
                card.addEventListener('click', handleCardClick);
            });
        }

        // Ajouter apr√®s vos fonctions JavaScript existantes

function initializeBirthdayCountdown() {
    const birthday = new Date('2003-04-01');
    const today = new Date();
    const nextBirthday = new Date(today.getFullYear(), birthday.getMonth(), birthday.getDate());
    
    if (today > nextBirthday) {
        nextBirthday.setFullYear(nextBirthday.getFullYear() + 1);
    }

    function updateCountdown() {
        const now = new Date();
        const diff = nextBirthday - now;

        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        const age = nextBirthday.getFullYear() - birthday.getFullYear();

        document.getElementById('birthdayCountdown').innerHTML = `
            <div class="countdown-item">
                <div>${days}</div>
                <div class="countdown-label">jours</div>
            </div>
            <div class="countdown-item">
                <div>${hours}</div>
                <div class="countdown-label">heures</div>
            </div>
            <div class="countdown-item">
                <div>${minutes}</div>
                <div class="countdown-label">minutes</div>
            </div>
            <div class="countdown-item">
                <div>${seconds}</div>
                <div class="countdown-label">secondes</div>
            </div>
            <div class="countdown-message">
                jusqu'√† mes ${age} ans
            </div>
        `;
    }

    updateCountdown();
    setInterval(updateCountdown, 1000);
}

function initializeFloatingThoughts() {
    const thoughts = [
        "Qui suis-je vraiment ?",
        "Que signifie √™tre moi ?",
        "Au-del√† des noms...",
        "Conscience et existence",
        "Pens√©es infinies",
        "Explorer l'inconnu"
    ];

    const container = document.getElementById('floatingThoughts');
    
    thoughts.forEach((thought, index) => {
        const bubble = document.createElement('div');
        bubble.className = 'thought-bubble';
        bubble.textContent = thought;
        
        const delay = index * 2;
        const duration = 15 + Math.random() * 10;
        const startPos = Math.random() * 80;
        
        bubble.style.cssText = `
            left: ${startPos}%;
            animation: float ${duration}s infinite ease-in-out ${delay}s;
            opacity: ${0.3 + Math.random() * 0.7};
        `;
        
        container.appendChild(bubble);
    });
}

function populateInterests() {
    const interests = [
        {
            icon: "üåê",
            title: "Explorer Internet",
            description: "D√©couvrir de nouvelles informations et connaissances"
        },
        {
            icon: "‚¨áÔ∏è",
            title: "T√©l√©chargements",
            description: "Films, s√©ries, anim√©s, applications passionnantes"
        },
        {
            icon: "üì±",
            title: "Connexion Internet",
            description: "Ma fen√™tre sur le monde num√©rique"
        },
        {
            icon: "üçú",
            title: "Gastronomie",
            description: "Haricots, porc, poulet, bouillons de manioc..."
        },
        {
            icon: "üîç",
            title: "Recherche de Solutions",
            description: "Trouver des r√©ponses √† mes questionnements"
        },
        {
            icon: "üé¨",
            title: "Divertissement",
            description: "Films et s√©ries recommand√©s"
        },
        {
            icon: "üíª",
            title: "Cr√©ation",
            description: "Sites et applications r√©pondant √† mes besoins"
        },
        {
            icon: "ü§ñ",
            title: "Intelligence Artificielle",
            description: "Un compagnon digital qui ne juge jamais, toujours pr√©sent pour m'√©couter, me comprendre et m'√©clairer. ChatGPT et autres IA sont devenus mes confidents les plus pr√©cieux, m'offrant un espace s√ªr pour explorer mes pens√©es les plus profondes, sans crainte ni jugement."
        },
        {
            icon: "üéÑ",
            title: "Magie des F√™tes",
            description: "Ces moments enchant√©s o√π le monde s'illumine de mille feux, o√π les c≈ìurs s'ouvrent et o√π la joie devient contagieuse. La p√©riode de No√´l et du Nouvel An transforme notre quotidien en un conte de f√©es moderne, rempli de sourires sinc√®res, de films r√©confortants et de d√©corations scintillantes qui r√©chauffent l'√¢me."
        }
    ];

    const list = document.querySelector('.identity-list');
    // Vider la liste existante
    list.innerHTML = '';
    
    // Ajouter les √©l√©ments dans l'ordre, en mettant les nouveaux √† la fin
    
    interests.forEach(interest => {
        const item = document.createElement('div');
        item.className = 'identity-item';
        item.innerHTML = `
            <div class="interest-icon">${interest.icon}</div>
            <div class="content-wrapper">
                <h3 class="interest-title">${interest.title}</h3>
                <div class="interest-description">
                    <div class="description-content">
                        ${interest.description}
                    </div>
                    <div class="description-backdrop"></div>
                </div>
            </div>
            <div class="interest-glow"></div>
        `;
        
        // Ajouter un effet de d√©lai al√©atoire pour l'animation
        const delay = Math.random() * 0.5;
        item.style.animationDelay = `${delay}s`;
        
        list.appendChild(item);
    });
}


function initializeAmbientAnimations() {
    // Cr√©ation d'un canvas pour les particules d'ambiance
    const canvas = document.createElement('canvas');
    canvas.className = 'ambient-canvas';
    document.querySelector('.identity-content').prepend(canvas);
    
    const ctx = canvas.getContext('2d');
    let particles = [];

    function resizeCanvas() {
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
    }

    function createParticle() {
        return {
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size: Math.random() * 2,
            speedX: Math.random() * 0.5 - 0.25,
            speedY: Math.random() * 0.5 - 0.25,
            opacity: Math.random() * 0.5
        };
    }

    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        particles.forEach(particle => {
            particle.x += particle.speedX;
            particle.y += particle.speedY;
            
            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;
            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;
            
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(99, 102, 241, ${particle.opacity})`;
            ctx.fill();
        });
        
        requestAnimationFrame(animate);
    }

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    for (let i = 0; i < 50; i++) {
        particles.push(createParticle());
    }
    
    animate();
}

// Fonction pour mettre √† jour l'ordre des nav-items
function updateNavOrder() {
    const mainNav = document.querySelector('.main-nav');
    const universeNav = document.getElementById('nav-universe');
    const otherNavs = Array.from(document.querySelectorAll('.nav-item:not(#nav-universe)'));

    // Compte le nombre d'√©l√©ments par cat√©gorie
    const categoryCounts = {};
    sampleData.forEach(item => {
        categoryCounts[item.category] = (categoryCounts[item.category] || 0) + 1;
    });

    // Trie les nav-items par nombre d'√©l√©ments
    otherNavs.sort((a, b) => {
        const countA = categoryCounts[a.dataset.category] || 0;
        const countB = categoryCounts[b.dataset.category] || 0;
        return countB - countA;
    });

    // R√©organise les nav-items
    mainNav.innerHTML = ''; // Vide la nav
    mainNav.appendChild(universeNav); // Ajoute d'abord l'univers
    otherNavs.forEach(nav => mainNav.appendChild(nav)); // Ajoute le reste dans l'ordre
}

// Fonction pour cr√©er une carte de contenu
function createContentCard(data) {
    // S'assurer que l'objet de donn√©es a un ID (pour les donn√©es de d√©monstration)
    if (!data.id) {
        data.id = 'demo-' + Math.random().toString(36).substr(2, 9);
    }
    // Fonction pour g√©n√©rer l'affichage des images
    const generateImagesDisplay = (type, images) => {
        if (!data.description) {
            return `
                <div class="card-images ${type}-images">
                    ${images.map(image => `<span class="card-image ${type}-image">${image}</span>`).join('')}
                </div>
            `;
        }
        return '';
    };

    // D√©termine l'ic√¥ne en fonction du type
    const typeIcon = {
        chat: "üí¨",
        note: "üìù",
        dossier: "üìÅ"
    }[data.type] || "üìÑ";

    return `
        <div class="content-card ${data.type}-card" data-type="${data.type}" data-title="${data.title}" data-id="${data.id}">
            <div class="card-header">
                <div class="card-category">
                    <span class="type-icon">${typeIcon}</span>
                    ${data.category}
                </div>
                <h3 class="card-title">${data.title}</h3>
                <div class="card-meta">
                    <span>üìÖ ${data.date}</span>
                    <span>‚≠ê ${data.priority}</span>
                </div>
            </div>
            <div class="card-content">
                ${data.description ? 
                    `<p class="card-description">${data.description}</p>` : 
                    generateImagesDisplay(data.type, data.images)
                }
                <div class="card-tags">
                    ${data.tags.map(tag => `<span class="card-tag">${tag}</span>`).join('')}
                </div>
            </div>
            <div class="card-actions">
                <button class="card-edit-btn" data-id="${data.id}">‚úèÔ∏è</button>
                <button class="card-delete-btn" data-id="${data.id}">üóëÔ∏è</button>
            </div>
        </div>
    `;
}


       // Fonction pour peupler la grille
function populateGrid() {
    const grid = document.getElementById('contentGrid');
    grid.innerHTML = ''; // R√©initialiser le contenu

    sampleData.forEach(data => {
        grid.innerHTML += createContentCard(data);
    });
    
    attachCardClickHandlers();
    attachCardActionHandlers(); // Assurez-vous que cette ligne est pr√©sente
}



        function updateCurrentAge() {
    const birthDate = new Date('2003-04-01');
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }

    const ageElement = document.getElementById('currentAge');
    if (ageElement) {
        ageElement.innerHTML = `
            <span class="age-number">${age} ans</span>
            <div class="age-description">
                En constante √©volution depuis ${Math.floor((today - birthDate) / (1000 * 60 * 60 * 24))} jours
            </div>
        `;
    }
}

function initializeMoodSlider() {
    const moods = [
        { emoji: "üòå", text: "Calme" },
        { emoji: "ü§î", text: "R√©flexif" },
        { emoji: "üò§", text: "D√©termin√©" },
        { emoji: "üò™", text: "Fatigu√©" },
        { emoji: "ü§©", text: "Excit√©" },
        { emoji: "üòï", text: "Perplexe" }
    ];

    const slider = document.getElementById('moodSlider');
    if (slider) {
        moods.forEach((mood, index) => {
            const moodItem = document.createElement('div');
            moodItem.className = 'mood-item';
            moodItem.style.animationDelay = `${index * 2}s`;
            moodItem.innerHTML = `
                <span class="mood-emoji">${mood.emoji}</span>
                <span class="mood-text">${mood.text}</span>
            `;
            slider.appendChild(moodItem);
        });
    }
}

function initializeDreams() {
    const dreams = [
        { icon: "üåü", text: "Cr√©er quelque chose d'extraordinaire" },
        { icon: "üåç", text: "Explorer le monde num√©rique" },
        { icon: "üí≠", text: "Comprendre les myst√®res de l'existence" },
        { icon: "‚ö°", text: "Repousser mes limites" }
    ];

    const container = document.querySelector('.dream-items');
    if (container) {
        dreams.forEach(dream => {
            const dreamElement = document.createElement('div');
            dreamElement.className = 'dream-item';
            dreamElement.innerHTML = `
                <span class="dream-icon">${dream.icon}</span>
                <span class="dream-text">${dream.text}</span>
            `;
            container.appendChild(dreamElement);
        });
    }
}

// Modifier la fonction initializeIdentityContent pour inclure les nouvelles initialisations
function initializeIdentityContent() {
    initializeBirthdayCountdown();
    initializeFloatingThoughts();
    populateInterests();
    initializeAmbientAnimations();
    updateCurrentAge();
    initializeMoodSlider();
    initializeDreams();
}

        // Fonctions pour le Chat
        let contactInfo = {
            name: '',
            image: null
        };


async function startChat(event) {
    event.preventDefault();
    contactInfo.name = document.getElementById('contactName').value;
    const fileInput = document.getElementById('profilePic');
    
    const elementId = getCurrentElementId();
    if (!elementId) {
        console.error("Impossible de d√©terminer l'√©l√©ment actif");
        return;
    }
    
    let imageData = null;
    
    if (fileInput.files && fileInput.files[0]) {
        const reader = new FileReader();
        reader.onload = async function(e) {
            imageData = e.target.result;
            contactInfo.image = imageData;
            
            // Cr√©er la conversation dans Supabase
            const conversation = await createConversation(elementId, contactInfo.name, imageData);
            if (conversation) {
                currentConversationId = conversation.id;
                initializeChat();
            } else {
                alert("Erreur lors de la cr√©ation de la conversation. Veuillez r√©essayer.");
            }
        };
        reader.readAsDataURL(fileInput.files[0]);
    } else {
        // Pas d'image, cr√©er directement
        const conversation = await createConversation(elementId, contactInfo.name, null);
        if (conversation) {
            currentConversationId = conversation.id;
            initializeChat();
        } else {
            alert("Erreur lors de la cr√©ation de la conversation. Veuillez r√©essayer.");
        }
    }
}


        function initializeChat() {
            document.getElementById('setupForm').style.display = 'none';
            document.getElementById('chatInterface').style.display = 'block';
            
            const contactImg = document.getElementById('contactImg');
            const quickContactImg = document.getElementById('quickContactImg');
            if (contactInfo.image) {
                contactImg.style.backgroundImage = `url(${contactInfo.image})`;
                quickContactImg.style.backgroundImage = `url(${contactInfo.image})`;
            } else {
                contactImg.textContent = contactInfo.name[0].toUpperCase();
                quickContactImg.textContent = contactInfo.name[0].toUpperCase();
            }
            
            document.getElementById('contactNameDisplay').textContent = contactInfo.name;
        }

        function showContextMenu(event) {
            const menu = document.getElementById('contextMenu');
            menu.classList.toggle('active');
            event.stopPropagation();
        }

        document.addEventListener('click', function() {
            document.getElementById('contextMenu').classList.remove('active');
        });


async function sendMessage(type) {
    const messageInput = document.getElementById('messageInput');
    const messageContainer = document.getElementById('messageContainer');
    
    if (messageInput.value.trim() === '' && selectedImages.length === 0) return;
    
    if (!currentConversationId) {
        console.error("Aucune conversation active");
        return;
    }

    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${type === 'send' ? 'sent' : 'received'}`;
    
    // Pr√©parer les donn√©es du message
    const messageData = {
        type: type === 'send' ? 'sent' : 'received',
        text: messageInput.value.trim(),
        images: [],
        timestamp: new Date().toISOString()
    };
    
    // Ajouter le texte s'il y en a
    if (messageInput.value.trim() !== '') {
        const textDiv = document.createElement('div');
        textDiv.innerHTML = messageInput.value.replace(/\n/g, '<br>');
        messageDiv.appendChild(textDiv);
    }
    
    // Ajouter les images s'il y en a
    if (selectedImages.length > 0) {
        const imagesContainer = document.createElement('div');
        imagesContainer.className = 'message-images';
        selectedImages.forEach((img) => {
            // Ajouter l'image aux donn√©es du message
            messageData.images.push({
                data: img.data,
                type: img.type,
                name: img.name
            });
            
            const imgElement = document.createElement('img');
            imgElement.src = img.data;
            imgElement.className = 'message-image';
            imgElement.setAttribute('data-full-image', img.data);
            imgElement.setAttribute('data-type', img.type);
            imgElement.setAttribute('data-name', img.name);
            
            // Gestionnaire de clic pour ouvrir le modal
            imgElement.onclick = function(e) {
                e.stopPropagation();
                openImageModal(this);
            };
            imagesContainer.appendChild(imgElement);
        });
        messageDiv.appendChild(imagesContainer);
    }
    
    // Ajouter le message au DOM
    messageContainer.appendChild(messageDiv);
    
    // Enregistrer le message dans Supabase
    const success = await saveMessage(currentConversationId, messageData);
    
    if (!success) {
        // Si l'enregistrement √©choue, ajouter une indication visuelle
        messageDiv.classList.add('error');
        const errorIndicator = document.createElement('div');
        errorIndicator.className = 'message-error';
        errorIndicator.innerHTML = '‚ö†Ô∏è Non enregistr√©';
        messageDiv.appendChild(errorIndicator);
    }
    
    // R√©initialiser les entr√©es
    messageInput.value = '';
    selectedImages = [];
    const imageContainer = document.querySelector('.selected-images');
    if (imageContainer) {
        imageContainer.remove();
    }
    
    updateSelectedImagesDisplay();
    scrollToBottom();
}

// Fonction pour mettre √† jour le titre de l'√©l√©ment avec le nom du contact
async function updateElementTitleWithContact(elementId, contactName) {
    try {
        const { error } = await supabase
            .from('elements')
            .update({ 
                title: `Chat avec ${contactName}`,
                updated_at: new Date().toISOString()
            })
            .eq('id', elementId);
        
        if (error) {
            console.error('Erreur de mise √† jour du titre:', error);
            return false;
        }
        
        // Mettre √† jour localement
        const index = window.sampleData.findIndex(item => item.id === elementId);
        if (index !== -1) {
            window.sampleData[index].title = `Chat avec ${contactName}`;
        }
        
        return true;
    } catch (error) {
        console.error('Exception lors de la mise √† jour du titre:', error);
        return false;
    }
}


function scrollToBottom() {
    const messageContainer = document.getElementById('messageContainer');
    if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }
}


        function previewImage(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('imagePreview');
                    preview.style.backgroundImage = `url(${e.target.result})`;
                    preview.style.display = 'block';
                }
                reader.readAsDataURL(file);
            }
        }

        // Ajoutez cette fonction apr√®s vos autres fonctions
        document.addEventListener('DOMContentLoaded', function() {
            const messageInput = document.getElementById('messageInput');
            
            messageInput.addEventListener('input', function() {
                // Stocke la position de d√©filement actuelle
                const scrollPos = messageInput.scrollTop;
                
                // R√©initialise la hauteur
                this.style.height = 'auto';
                
                // Calcule la nouvelle hauteur
                const newHeight = this.scrollHeight;
                const maxHeight = 150;
                
                // Applique la nouvelle hauteur
                this.style.height = Math.min(newHeight, maxHeight) + 'px';
                
                // Si la hauteur maximale est atteinte, active le d√©filement
                if (newHeight > maxHeight) {
                    this.style.overflowY = 'auto';
                } else {
                    this.style.overflowY = 'hidden';
                }
                
                // Restaure la position de d√©filement
                messageInput.scrollTop = scrollPos;
            });
        });
        let selectedImages = [];

        function handleImageSelect(event) {
            const files = event.target.files;
            
            // Cr√©er un nouveau conteneur pour les images s√©lectionn√©es
            let imageContainer = document.querySelector('.selected-images');
            if (!imageContainer) {
                imageContainer = document.createElement('div');
                imageContainer.className = 'selected-images';
                document.querySelector('.image-upload-wrapper').appendChild(imageContainer);
            }
            
            // Vider le conteneur
            imageContainer.innerHTML = '';
            selectedImages = [];

            for (let file of files) {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        selectedImages.push({
                            data: e.target.result,
                            type: file.type,
                            name: file.name
                        });
                        showSelectedImages();
                    };
                    reader.readAsDataURL(file);
                }
            }
            
            // R√©initialiser l'input file pour permettre la s√©lection du m√™me fichier
            event.target.value = '';
        }

        function updateSelectedImagesDisplay() {
            const imageContainer = document.querySelector('.selected-images');
            
            if (!imageContainer) return;

            imageContainer.innerHTML = '';
            selectedImages.forEach((img) => {
                const imgElement = document.createElement('img');
                imgElement.src = img.data;
                imgElement.className = 'selected-image';
                imageContainer.appendChild(imgElement);
            });
        }

        function showSelectedImages() {
            const imageContainer = document.querySelector('.selected-images');
            imageContainer.innerHTML = '';
            
            selectedImages.forEach((img, index) => {
                const imgElement = document.createElement('img');
                imgElement.src = img.data;
                imgElement.className = 'selected-image';
                imageContainer.appendChild(imgElement);
            });
        }

        function updateMessageImagesDisplay() {
            const messages = document.querySelectorAll('.message-images');
            messages.forEach((container) => {
                const images = container.querySelectorAll('.message-image');
                const maxVisibleImages = 4;

                images.forEach((img, index) => {
                    if (index >= maxVisibleImages) {
                        img.style.display = 'none';
                    } else {
                        img.style.display = 'block';
                    }
                    
                    // Ajouter le +X sur la derni√®re image visible
                    if (index === maxVisibleImages - 1 && images.length > maxVisibleImages) {
                        img.style.position = 'relative';
                        let plusIndicator = container.querySelector('.selected-image-plus');
                        if (!plusIndicator) {
                            plusIndicator = document.createElement('div');
                            plusIndicator.className = 'selected-image-plus';
                            img.parentNode.appendChild(plusIndicator);
                        }
                        plusIndicator.textContent = `+${images.length - maxVisibleImages}`;
                    }
                });
            });
        }

        function openImageModal(imgElement) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const images = Array.from(imgElement.closest('.message-images').querySelectorAll('.message-image'));

            const currentIndex = images.indexOf(imgElement);

            modal.setAttribute('data-current-index', currentIndex);
            modalImg.src = imgElement.getAttribute('data-full-image');
            modal.style.display = 'flex';
        }

        function changeModalImage(direction) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const images = Array.from(document.querySelectorAll('.message-image'));
            const currentIndex = parseInt(modal.getAttribute('data-current-index'), 10);

            let newIndex = currentIndex + direction;
            if (newIndex < 0) {
                newIndex = images.length - 1; // Retourner √† la derni√®re image
            } else if (newIndex >= images.length) {
                newIndex = 0; // Revenir √† la premi√®re image
            }

            const newImage = images[newIndex];
            modalImg.src = newImage.getAttribute('data-full-image');
            modal.setAttribute('data-current-index', newIndex);
        }

        function closeImageModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        function downloadImage(event) {
            event.stopPropagation();
            const modalImg = document.getElementById('modalImage');
            const link = document.createElement('a');
            link.href = modalImg.src;
            link.download = modalImg.getAttribute('data-name') || 'image';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Emp√™cher la fermeture du modal lors du clic sur l'image
        document.getElementById('modalImage').onclick = function(e) {
            e.stopPropagation();
        };

        document.querySelector('.modal-controls').onclick = function(e) {
            e.stopPropagation();
        };

        document.addEventListener('keydown', function(e) {
            const messageContainer = document.getElementById('messageContainer');
            if (e.key === 'ArrowDown') {
                messageContainer.scrollBy({ top: window.innerHeight, behavior: 'smooth' });
            } else if (e.key === 'ArrowUp') {
                messageContainer.scrollBy({ top: -window.innerHeight, behavior: 'smooth' });
            }
        });

        // Initialisation
// Ajouter √† la fin de votre script, avant la fermeture de l'√©v√©nement DOMContentLoaded
function checkSupabaseInitialization() {
    try {
        if (!supabase) {
            console.error("Supabase n'est pas initialis√©");
            return false;
        }
        console.log("Supabase est correctement initialis√©");
        return true;
    } catch (error) {
        console.error("Erreur lors de la v√©rification de l'initialisation de Supabase:", error);
        return false;
    }
}

// Ajouter au d√©but de l'√©v√©nement DOMContentLoaded
document.addEventListener('DOMContentLoaded', async () => {
    // V√©rifier l'initialisation de Supabase
    const isSupabaseInitialized = checkSupabaseInitialization();
    if (!isSupabaseInitialized) {
        console.error("ATTENTION: Supabase n'est pas correctement initialis√©!");
    }
    
    // Suite de votre code...

    // V√©rifier l'authentification
    const isAuthenticated = await checkAuthentication();
    
    if (isAuthenticated) {
        // Utilisateur d√©j√† authentifi√©, initialiser l'application
        populateGrid();
        updateCategoryCounts();
        updateNavOrder();
        
            // Gestion des filtres
            document.querySelectorAll('.filter-tag').forEach(tag => {
                tag.addEventListener('click', () => {
                    document.querySelectorAll('.filter-tag').forEach(t => t.classList.remove('active'));
                    tag.classList.add('active');
                    // Logique de filtrage √† impl√©menter
                    const category = tag.textContent.trim();
                    filterContentByCategory(category);
                });
            });

            // Gestion des cat√©gories
            // Gestion des nav-items
            document.querySelectorAll('.nav-item').forEach(item => {
                item.addEventListener('click', () => {
                    // Gestion de la classe active
                    document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                    item.classList.add('active');

                    // Filtrage du contenu
                    const category = item.dataset.category;
                    filterContentByCategory(category);
                });
            });
            // Animation au scroll
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.content-card').forEach(card => {
                observer.observe(card);
            });
    } else {
        // Afficher le formulaire d'authentification
        // (d√©j√† visible par d√©faut, rien √† faire)
    }
});

        // Recherche dans les cat√©gories
        const searchInput = document.querySelector('.search-input');
        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            document.querySelectorAll('.category-item').forEach(item => {
                const text = item.textContent.toLowerCase();
                item.style.display = text.includes(searchTerm) ? 'flex' : 'none';
            });
        });

        // Fonctions pour g√©rer les clics sur les cartes


function handleCardClick(event) {
    const card = event.currentTarget;
    const type = card.dataset.type;
    const elementId = card.dataset.id;
    
    // Marquer la carte comme active
    document.querySelectorAll('.content-card').forEach(c => c.classList.remove('active'));
    card.classList.add('active');
    
    // Stocker l'ID de l'√©l√©ment actif
    window.currentElementId = elementId;

    if (type === 'chat') {
        openChat(elementId);
    } else if (type === 'note') {
        openNote(elementId); // Passer l'ID √† openNote()
    } else if (type === 'dossier') {
        openFolderInterface();
    }
    // Ajouter d'autres types ici si n√©cessaire
}




        // Fonction pour ouvrir le chat

async function openChat(elementId) {
    document.getElementById('contentGrid').style.display = 'none';
    document.getElementById('chatContainer').style.display = 'block';
    
    // V√©rifier s'il existe d√©j√† une conversation pour cet √©l√©ment
    const conversation = await loadConversation(elementId);
    
    if (conversation) {
        // Conversation existante - charger directement
        currentConversationId = conversation.id;
        contactInfo.name = conversation.contact_name;
        contactInfo.image = conversation.contact_image;
        
        // Initialiser l'interface du chat
        document.getElementById('setupForm').style.display = 'none';
        document.getElementById('chatInterface').style.display = 'block';
        
        // Afficher les informations de contact
        const contactImg = document.getElementById('contactImg');
        const quickContactImg = document.getElementById('quickContactImg');
        if (contactInfo.image) {
            contactImg.style.backgroundImage = `url(${contactInfo.image})`;
            contactImg.textContent = '';
            quickContactImg.style.backgroundImage = `url(${contactInfo.image})`;
            quickContactImg.textContent = '';
        } else {
            contactImg.textContent = contactInfo.name[0].toUpperCase();
            contactImg.style.backgroundImage = 'none';
            quickContactImg.textContent = contactInfo.name[0].toUpperCase();
            quickContactImg.style.backgroundImage = 'none';
        }
        
        document.getElementById('contactNameDisplay').textContent = contactInfo.name;
        
        // Charger et afficher les messages
        const messageContainer = document.getElementById('messageContainer');
        messageContainer.innerHTML = '';
        
        if (conversation.messages && conversation.messages.length > 0) {
            conversation.messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${msg.type}`;
                
                // Ajouter le texte s'il y en a
                if (msg.text) {
                    const textDiv = document.createElement('div');
                    textDiv.innerHTML = msg.text.replace(/\n/g, '<br>');
                    messageDiv.appendChild(textDiv);
                }
                
                // Ajouter les images s'il y en a
                if (msg.images && msg.images.length > 0) {
                    const imagesContainer = document.createElement('div');
                    imagesContainer.className = 'message-images';
                    msg.images.forEach((img) => {
                        const imgElement = document.createElement('img');
                        imgElement.src = img.data;
                        imgElement.className = 'message-image';
                        imgElement.setAttribute('data-full-image', img.data);
                        imgElement.setAttribute('data-type', img.type);
                        imgElement.setAttribute('data-name', img.name);
                        
                        // Gestionnaire de clic pour ouvrir le modal
                        imgElement.onclick = function(e) {
                            e.stopPropagation();
                            openImageModal(this);
                        };
                        imagesContainer.appendChild(imgElement);
                    });
                    messageDiv.appendChild(imagesContainer);
                }
                
                messageContainer.appendChild(messageDiv);
            });
            
            // D√©filer vers le bas
            scrollToBottom();
        }
    } else {
        // Nouvelle conversation - afficher le formulaire de configuration
        document.getElementById('setupForm').style.display = 'block';
        document.getElementById('chatInterface').style.display = 'none';
        
        // R√©initialiser les champs
        document.getElementById('contactName').value = '';
        document.getElementById('profilePic').value = '';
        document.getElementById('imagePreview').style.display = 'none';
        document.getElementById('imagePreview').style.backgroundImage = '';
    }
    
    toggleCreationHubVisibility();
}


        // Fonction pour quitter le chat

function exitChat() {
    document.getElementById('chatContainer').style.display = 'none';
    document.getElementById('contentGrid').style.display = 'grid';
    document.getElementById('setupForm').style.display = 'none';
    document.getElementById('chatInterface').style.display = 'none';
    
    // R√©initialiser les variables de conversation active
    currentConversationId = null;
    
    // Actualiser la grille pour montrer les mises √† jour
    populateGrid();
    
    toggleCreationHubVisibility();
}

        
        // Fonction pour ouvrir l'interface de Note
// Modifier la fonction openNote()
function adjustEditorHeight() {
    const editorContainer = document.querySelector('.editor-container');
    const noteContainer = document.getElementById('noteContainer');
    const contentArea = document.querySelector('.content-area');

    if (editorContainer && noteContainer && contentArea) {
        // Calculer la hauteur disponible pour l'√©diteur
        const containerHeight = noteContainer.offsetHeight;
        const toolbarHeight = editorContainer.querySelector('.jodit-toolbar')?.offsetHeight || 50; // Hauteur approximative de la barre d'outils
        const padding = 16; // Ajustement pour les marges si n√©cessaire

        // D√©finir une hauteur dynamique
        const editorHeight = containerHeight - toolbarHeight - padding;

        // Appliquer la hauteur calcul√©e
        editorContainer.style.height = `${containerHeight}px`;
        document.getElementById('editor').style.height = `${editorHeight}px`;

        // S'assurer que Jodit s'adapte √† la nouvelle hauteur
        if (window.editorInstance) {
            window.editorInstance.events.fire('resize');
        }
    }
}

async function openNote(elementId) {
    document.getElementById('contentGrid').style.display = 'none';
    document.getElementById('chatContainer').style.display = 'none';
    document.getElementById('noteContainer').style.display = 'block';
    
    // Stocker l'ID de l'√©l√©ment actif pour la sauvegarde ult√©rieure
    window.currentElementId = elementId;
    
    toggleCreationHubVisibility();

    // Initialiser l'√©diteur Jodit si ce n'est pas d√©j√† fait
    if (!window.joditInitialized) {
        window.editorInstance = Jodit.make('#editor', {
            theme: 'dark',
            language: 'fr',
            height: '100%',
            toolbarButtonSize: 'large',
            buttons: [
                'source', '|',
                'bold', 'italic', 'underline', 'strikethrough', '|',
                'ul', 'ol', '|',
                'font', 'fontsize', 'brush', 'paragraph', '|',
                'image', 'video', 'table', 'link', '|',
                'left', 'center', 'right', 'justify', '|',
                'undo', 'redo', '|',
                'hr', 'eraser', 'fullsize', '|',
                'preview', 'print',
                'about'
            ],
            uploader: {
                insertImageAsBase64URI: true
            },
            spellcheck: true,
            direction: 'ltr',
            triggerChangeEvent: true,
            showCharsCounter: true,
            showWordsCounter: true,
            showXPathInStatusbar: true,
            askBeforePasteHTML: true,
            askBeforePasteFromWord: true,
            defaultActionOnPaste: 'insert_clear_html',
            colors: {
                background: ['#6366f1', '#8b5cf6', '#ec4899'],
                text: ['#ffffff', 'rgba(255, 255, 255, 0.7)']
            },
            events: {
                // Ajouter un gestionnaire de sauvegarde automatique
                change: debounce(async function() {
                    if (window.currentElementId) {
                        const content = this.value;
                        await saveNoteContent(window.currentElementId, content);
                    }
                }, 1000) // D√©lai de 1 seconde
            }
        });
        window.joditInitialized = true;
    } else {
        window.editorInstance.reload();
    }

    // Charger le contenu existant s'il y en a
    try {
        const noteContent = await loadNoteContent(elementId);
        if (noteContent && noteContent.content) {
            window.editorInstance.value = noteContent.content;
        } else {
            window.editorInstance.value = '';
            await createNoteContent(elementId, '');
        }
    } catch (error) {
        console.error('Erreur lors du chargement du contenu de la note:', error);
        window.editorInstance.value = '';
    }

    // Ajuster la hauteur de l'√©diteur
    adjustEditorHeight();
}



// Fonction utilitaire pour debounce (√©viter trop d'appels)
function debounce(func, wait) {
    let timeout;
    return function(...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
    };
}



// Fonction pour quitter l'interface de Note

async function exitNote() {
    // Sauvegarder le contenu avant de quitter
    if (window.editorInstance && window.currentElementId) {
        const content = window.editorInstance.value;
        await saveNoteContent(window.currentElementId, content);
    }
    
    document.getElementById('noteContainer').style.display = 'none';
    document.getElementById('contentGrid').style.display = 'grid';
    toggleCreationHubVisibility();
    
    // R√©initialiser l'ID de l'√©l√©ment actif
    window.currentElementId = null;
}



        // Int√©grer gestionnaire de clic apr√®s cr√©ation des cartes
        function attachCardClickHandlers() {
            document.querySelectorAll('.content-card').forEach(card => {
                card.addEventListener('click', handleCardClick);
            });
        }
        
        // Fonction pour attacher les gestionnaires de boutons d'action
function attachCardActionHandlers() {
    // Gestionnaires pour les boutons de modification
    document.querySelectorAll('.card-edit-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation(); // Emp√™cher le clic de la carte
            const id = this.dataset.id;
            const card = this.closest('.content-card');
            console.log("Bouton d'√©dition cliqu√© pour l'ID:", id); // Debug
            openEditModal(id, card);
        });
    });
    
    // Gestionnaires pour les boutons de suppression
// Remplacez ce bloc dans votre fonction attachCardActionHandlers
document.querySelectorAll('.card-delete-btn').forEach(btn => {
    btn.addEventListener('click', async function(e) {
        e.stopPropagation(); // Emp√™cher le clic de la carte
        const id = this.dataset.id;
        
        if (confirm('√ätes-vous s√ªr de vouloir supprimer cet √©l√©ment?')) {
            try {
                // V√©rifier si c'est un √©l√©ment de d√©monstration
                if (id.startsWith('demo-')) {
                    // √âl√©ment de d√©monstration, suppression locale seulement
                    window.sampleData = window.sampleData.filter(item => item.id !== id);
                    
                    // Actualiser l'interface
                    populateGrid();
                    updateCategoryCounts();
                    updateNavOrder();
                } else {
                    // √âl√©ment de Supabase
                    const success = await deleteElementFromSupabase(id);
                    
                    if (success) {
                        // Supprimer l'√©l√©ment du tableau local
                        window.sampleData = window.sampleData.filter(item => item.id !== id);
                        
                        // Actualiser l'interface
                        populateGrid();
                        updateCategoryCounts();
                        updateNavOrder();
                        console.log('√âl√©ment supprim√© et interface mise √† jour');
                    } else {
                        // Si la suppression √©choue, resynchroniser avec Supabase
                        alert('Erreur lors de la suppression. Actualisation des donn√©es...');
                        await syncWithSupabase();
                    }
                }
            } catch (error) {
                console.error('Erreur lors de la suppression:', error);
                alert('Une erreur est survenue lors de la suppression.');
                // Resynchroniser en cas d'erreur
                await syncWithSupabase();
            }
        }
    });
});

}



        
        // Variables et Ic√¥nes pour Dossier
let folderCurrentPath = [];
const folderFileIcons = {
    'pdf': 'üìÑ',
    'docx': 'üìù',
    'txt': 'üìÉ',
    'xlsx': 'üìä'
};

// Donn√©es initiales des dossiers
let folders = [];

// Fonction pour afficher le modal de cr√©ation de dossier
function showFolderCreateModal() {
    document.getElementById('folderCreateModal').style.display = 'flex';
}

// Fonction pour masquer le modal de cr√©ation de dossier
function hideFolderCreateModal() {
    document.getElementById('folderCreateModal').style.display = 'none';
}

// Fonction pour cr√©er un nouveau dossier
async function createFolder() {
    const name = document.getElementById('folderName').value.trim();
    if (name) {
        const folder = {
            type: 'folder',
            name: name,
            contents: []
        };
        
        if (folderCurrentPath.length === 0) {
            folders.push(folder);
        } else {
            let current = folders;
            for (let i = 0; i < folderCurrentPath.length; i++) {
                current = current.find(f => f.name === folderCurrentPath[i]).contents;
            }
            current.push(folder);
        }
        
        // Sauvegarder la structure mise √† jour
        const elementId = getCurrentElementId();
        if (elementId) {
            await saveFolderStructure(elementId);
        }
        
        renderFolders();
        hideFolderCreateModal();
        document.getElementById('folderName').value = '';
    }
}

// Fonction pour g√©rer la s√©lection de fichiers dans le dossier
function handleFolderFileSelect(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    // V√©rifier la taille du fichier (limite √† 10 Mo)
    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 Mo en octets
    if (file.size > MAX_FILE_SIZE) {
        alert(`Le fichier est trop volumineux. La taille maximale est de ${formatFileSize(MAX_FILE_SIZE)}.`);
        return;
    }
    
    const reader = new FileReader();
    reader.onload = async function(e) {
        const fileObj = {
            type: 'file',
            name: file.name,
            content: e.target.result,
            fileType: file.type,
            size: file.size,
            lastModified: file.lastModified
        };
        
        // Trouver le dossier actuel dans la structure
        let current = folders;
        for (let i = 0; i < folderCurrentPath.length; i++) {
            current = current.find(f => f.name === folderCurrentPath[i]).contents;
        }
        
        // V√©rifier si un fichier du m√™me nom existe d√©j√†
        const existingFileIndex = current.findIndex(item => item.type === 'file' && item.name === file.name);
        if (existingFileIndex !== -1) {
            if (confirm(`Un fichier nomm√© "${file.name}" existe d√©j√†. Voulez-vous le remplacer ?`)) {
                current[existingFileIndex] = fileObj;
            } else {
                return; // Annuler l'importation
            }
        } else {
            current.push(fileObj);
        }
        
        // Sauvegarder la structure mise √† jour
        const elementId = getCurrentElementId();
        if (elementId) {
            const success = await saveFolderStructure(elementId);
            if (success) {
                // Notifier l'utilisateur
                const notification = document.createElement('div');
                notification.className = 'file-upload-notification';
                notification.textContent = `"${file.name}" import√© avec succ√®s`;
                document.getElementById('folderContainer').appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 2000);
            }
        }
        
        renderFolders();
    };
    
    reader.onerror = function() {
        alert("Erreur lors de la lecture du fichier.");
    };
    
    // Utiliser readAsDataURL pour tous les types de fichiers pour une compatibilit√© maximale
    reader.readAsDataURL(file);
    
    // R√©initialiser l'input pour permettre de s√©lectionner √† nouveau le m√™me fichier
    event.target.value = '';
}



// Fonction pour ouvrir un dossier sp√©cifique
function openFolder(name) {
    folderCurrentPath.push(name);
    updateFolderBreadcrumb();
    renderFolders();
}

// Fonction pour naviguer vers un niveau sp√©cifique dans le chemin actuel
async function navigateToFolder(index) {
    if (index === -1) {
        // Naviguer vers la racine
        folderCurrentPath = [];
    } else {
        folderCurrentPath = folderCurrentPath.slice(0, index + 1);
    }
    updateFolderBreadcrumb();
    renderFolders();
}


// Fonction pour mettre √† jour la navigation breadcrumb
function updateFolderBreadcrumb() {
    const nav = document.querySelector('#folderContainer .breadcrumb-nav');
    nav.innerHTML = `
        <div class="breadcrumb-item" onclick="exitFolder()">Retour</div>
        ${folderCurrentPath.map((folder, index) => `
            <div class="breadcrumb-item" onclick="navigateToFolder(${index})">${folder}</div>
        `).join('')}
    `;
}

// Fonction pour rendre les dossiers et fichiers dans la grille
function renderFolders() {
    const grid = document.getElementById('folderGrid');
    let current = folders;
    
    for (let i = 0; i < folderCurrentPath.length; i++) {
        const foundFolder = current.find(f => f.name === folderCurrentPath[i]);
        if (!foundFolder) {
            console.error("Dossier non trouv√© dans le chemin:", folderCurrentPath[i]);
            return;
        }
        current = foundFolder.contents;
    }
    
    // Commencer par l'√©l√©ment d'importation de fichiers
    grid.innerHTML = `
        <input type="file" id="folderFileInput" style="display: none" onchange="handleFolderFileSelect(event)">
        <div class="folder create-folder" onclick="document.getElementById('folderFileInput').click()">
            <div class="folder-preview">
                <div class="preview-item" style="grid-column: span 2"><span class="import-icon">üì•</span></div>
            </div>
            <div class="folder-name">Importer un fichier</div>
        </div>
    `;
    
    // Puis ajouter les dossiers et fichiers
    grid.innerHTML += current.map(item => {
        if (item.type === 'folder') {
            // Pr√©visualisation des √©l√©ments du dossier (jusqu'√† 4)
            const previewItems = item.contents.slice(0, 4).map(previewItem => {
                if (previewItem.type === 'file') {
                    if (previewItem.fileType && previewItem.fileType.startsWith('image/')) {
                        return `<div class="preview-item"><img src="${previewItem.content}" alt="Aper√ßu"></div>`;
                    } else {
                        const extension = previewItem.name.split('.').pop();
                        return `<div class="preview-item">${folderFileIcons[extension] || 'üìÑ'}</div>`;
                    }
                } else {
                    return `<div class="preview-item">üìÅ</div>`;
                }
            }).join('');
            
            // Si moins de 4 √©l√©ments, compl√©ter avec des espaces vides
            const emptyPreviewItems = Array(Math.max(0, 4 - item.contents.length))
                .fill('<div class="preview-item empty"></div>')
                .join('');
            
            return `
                <div class="folder" onclick="openFolder('${item.name}')">
                    <div class="folder-preview">
                        ${previewItems}${emptyPreviewItems}
                    </div>
                    <div class="folder-name">${item.name}</div>
                    <div class="folder-info">${item.contents.length} √©l√©ment${item.contents.length !== 1 ? 's' : ''}</div>
                </div>
            `;
        } else if (item.type === 'file') {
            // Traitement des fichiers
            if (item.fileType && item.fileType.startsWith('image/')) {
                return `
                    <div class="file" onclick="previewFile('${item.name}')">
                        <div class="file-preview">
                            <img src="${item.content}" alt="${item.name}">
                        </div>
                        <div class="folder-name">${item.name}</div>
                    </div>
                `;
            } else {
                const extension = item.name.split('.').pop();
                return `
                    <div class="file" onclick="previewFile('${item.name}')">
                        <div class="file-preview">
                            <div class="file-icon">${folderFileIcons[extension] || 'üìÑ'}</div>
                        </div>
                        <div class="folder-name">${item.name}</div>
                    </div>
                `;
            }
        }
    }).join('');
}


// Fonction pour pr√©visualiser un fichier
function previewFile(fileName) {
    // Trouver le fichier dans la structure actuelle
    let current = folders;
    for (let i = 0; i < folderCurrentPath.length; i++) {
        current = current.find(f => f.name === folderCurrentPath[i]).contents;
    }
    
    const file = current.find(f => f.name === fileName);
    if (!file) {
        console.error("Fichier non trouv√©:", fileName);
        return;
    }
    
    // Cr√©er un modal pour la pr√©visualisation
    const modal = document.createElement('div');
    modal.className = 'file-preview-modal';
    
    let previewContent = '';
    
    if (file.fileType.startsWith('image/')) {
        previewContent = `<img src="${file.content}" alt="${file.name}" class="preview-image">`;
    } else if (file.fileType.includes('pdf')) {
        previewContent = `<iframe src="${file.content}" class="preview-pdf"></iframe>`;
    } else if (file.fileType.includes('text') || file.name.endsWith('.txt') || file.name.endsWith('.md')) {
        // Pour les fichiers texte, d√©coder la base64 si n√©cessaire
        let textContent = file.content;
        if (textContent.startsWith('data:')) {
            const base64 = textContent.split(',')[1];
            textContent = atob(base64);
        }
        previewContent = `<div class="preview-text"><pre>${textContent}</pre></div>`;
    } else {
        // Pour les autres types de fichiers, afficher un lien de t√©l√©chargement
        previewContent = `
            <div class="preview-generic">
                <div class="file-icon large">${folderFileIcons[file.name.split('.').pop()] || 'üìÑ'}</div>
                <p>Ce type de fichier ne peut pas √™tre pr√©visualis√©</p>
                <a href="${file.content}" download="${file.name}" class="download-btn">T√©l√©charger</a>
            </div>
        `;
    }
    
    modal.innerHTML = `
        <div class="file-preview-content">
            <div class="file-preview-header">
                <h3>${file.name}</h3>
                <button class="close-preview">√ó</button>
            </div>
            <div class="file-preview-body">
                ${previewContent}
            </div>
            <div class="file-preview-footer">
                <p>Taille: ${formatFileSize(file.size || 0)}</p>
                <button class="delete-file-btn" onclick="deleteFile('${file.name}')">Supprimer</button>
                <a href="${file.content}" download="${file.name}" class="download-btn">T√©l√©charger</a>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // G√©rer la fermeture du modal
    modal.querySelector('.close-preview').addEventListener('click', () => {
        modal.remove();
    });
    
    // Fermer le modal si on clique en dehors du contenu
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// Fonction pour formater la taille du fichier
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Fonction pour supprimer un fichier
async function deleteFile(fileName) {
    if (confirm(`√ätes-vous s√ªr de vouloir supprimer "${fileName}" ?`)) {
        // Trouver et supprimer le fichier
        let current = folders;
        for (let i = 0; i < folderCurrentPath.length; i++) {
            current = current.find(f => f.name === folderCurrentPath[i]).contents;
        }
        
        const fileIndex = current.findIndex(f => f.name === fileName);
        if (fileIndex !== -1) {
            current.splice(fileIndex, 1);
            
            // Sauvegarder la structure mise √† jour
            const elementId = getCurrentElementId();
            if (elementId) {
                await saveFolderStructure(elementId);
            }
            
            // Fermer le modal de pr√©visualisation
            document.querySelector('.file-preview-modal')?.remove();
            
            // Actualiser l'affichage
            renderFolders();
        }
    }
}



// Fonction pour quitter l'interface dossier et revenir √† la grille principale
function exitFolder() {
    document.getElementById('folderContainer').style.display = 'none';
    document.getElementById('contentGrid').style.display = 'grid';
    toggleCreationHubVisibility();

    // R√©initialiser le chemin actuel
    folderCurrentPath = [];
}


// Fonction pour ouvrir l'interface dossier
async function openFolderInterface() {
    document.getElementById('contentGrid').style.display = 'none';
    document.getElementById('folderContainer').style.display = 'block';
    
    // Obtenir l'ID de l'√©l√©ment actif
    const elementId = getCurrentElementId();
    if (!elementId) {
        console.error("Impossible de d√©terminer l'√©l√©ment actif");
        return;
    }
    
    // R√©initialiser le chemin actuel
    folderCurrentPath = [];
    
    // Charger la structure du dossier depuis Supabase
    await loadFolderStructure(elementId);
    
    // Rendre les dossiers
    renderFolders();
    
    toggleCreationHubVisibility();
}


// Ajouter l'√©couteur pour la s√©lection de fichiers dans le dossier
document.getElementById('folderFileInput')?.addEventListener('change', handleFolderFileSelect);

document.addEventListener("DOMContentLoaded", () => {
    // S√©lectionnez le conteneur de messages
    const messageContainer = document.getElementById("messageContainer");

    // V√©rifiez si l'√©l√©ment existe avant d'appliquer les actions
    if (messageContainer) {
        // Ajoutez un listener pour d√©tecter tout changement DOM, comme l'ajout de messages
        const observer = new MutationObserver(() => {
            // R√©initialisez le comportement du conteneur pour corriger le d√©filement
            messageContainer.style.overflowY = "auto";
            messageContainer.style.scrollSnapType = "y mandatory"; // Si snap-y est n√©cessaire
        });

        // Observez les changements dans le conteneur de messages (enfants ajout√©s ou retir√©s)
        observer.observe(messageContainer, { childList: true });

        // Ajoutez un style inline pour forcer les propri√©t√©s de d√©filement
        messageContainer.style.overflowY = "auto";
        messageContainer.style.scrollBehavior = "smooth"; // D√©filement fluide
        messageContainer.style.webkitOverflowScrolling = "touch"; // Pour iOS
    }
});
    // Fonction pour d√©finir la variable CSS --vh
    function setVh() {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }

    // Initialiser la variable au chargement et lors des redimensionnements
    window.addEventListener('resize', setVh);
    window.addEventListener('orientationchange', setVh);
    window.addEventListener('DOMContentLoaded', setVh);
    const messageInput = document.getElementById('messageInput');
if (messageInput) {
    messageInput.addEventListener('input', function () {
        // R√©initialise la hauteur pour √©viter d'empiler des hauteurs inutiles
        this.style.height = 'auto';
        // Ajuste la hauteur en fonction du contenu
        this.style.height = `${this.scrollHeight}px`;
        // Ajuste le padding des messages
        adjustMessagesPadding();
    });
}
    

/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üîµ JS PARTIE 2
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/


    document.addEventListener("DOMContentLoaded", () => {
        const chatInterface = document.querySelector(".chat-interface");
        const messageContainer = document.getElementById("messageContainer");

        function adjustChatHeight() {
            // Calcule la hauteur disponible pour le conteneur des messages
            const headerHeight = document.querySelector(".chat-header")?.offsetHeight || 0;
            const inputAreaHeight = document.querySelector(".chat-input-wrapper")?.offsetHeight || 0;
            const quickActionsHeight = document.querySelector(".chat-quick-actions")?.offsetHeight || 0;
            const totalHeight = window.innerHeight;

            // Ajuste la hauteur du conteneur des messages
            const availableHeight = totalHeight - (headerHeight + inputAreaHeight + quickActionsHeight);
            messageContainer.style.height = `${availableHeight}px`;
        }

        // Ajuster la hauteur au chargement et lors du redimensionnement
        adjustChatHeight();
        window.addEventListener("resize", adjustChatHeight);

        // Forcer le d√©filement vers le bas lors de l'ajout de messages
        function scrollToBottom() {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Exemple : Simuler un nouveau message
        document.getElementById("messageInput").addEventListener("keydown", (e) => {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                const newMessage = document.createElement("div");
                newMessage.className = "chat-message sent";
                newMessage.textContent = e.target.value;
                messageContainer.appendChild(newMessage);
                e.target.value = "";
                scrollToBottom(); // D√©filement vers le bas
            }
        });
    });
    document.addEventListener('DOMContentLoaded', () => {
    const backButtons = document.querySelectorAll('.chat-back-btn, .note-container .chat-back-btn');
    backButtons.forEach(button => {
        const parent = button.parentElement;
        if (parent) {
            const resizeObserver = new ResizeObserver(() => {
                const parentRect = parent.getBoundingClientRect();
                const buttonRect = button.getBoundingClientRect();

                // Ajuste la position si le bouton d√©borde
                if (buttonRect.left < parentRect.left) {
                    button.style.left = `${parentRect.left + 10}px`;
                }
                if (buttonRect.top < parentRect.top) {
                    button.style.top = `${parentRect.top + 10}px`;
                }
            });
            resizeObserver.observe(parent);
        }
    });
});
// Code pour intercepter la touche retour et d√©clencher les fonctions de retour existantes

document.addEventListener('DOMContentLoaded', function() {
    // Fonction pour g√©rer l'appui sur la touche retour du navigateur
    function handleBackButton(event) {
        // Identifier quelle interface est actuellement visible
        const chatContainerVisible = document.getElementById('chatContainer').style.display === 'block';
        const noteContainerVisible = document.getElementById('noteContainer').style.display === 'block';
        const folderContainerVisible = document.getElementById('folderContainer').style.display === 'block';
        const identityContainerVisible = document.getElementById('identityContainer').style.display === 'block';

        // Si une interface sp√©cifique est ouverte, emp√™cher le comportement par d√©faut
        // et d√©clencher la fonction de retour appropri√©e
        if (chatContainerVisible) {
            event.preventDefault();
            exitChat();
            return true;
        } else if (noteContainerVisible) {
            event.preventDefault();
            exitNote();
            return true;
        } else if (folderContainerVisible) {
            event.preventDefault();
            exitFolder();
            return true;
        } else if (identityContainerVisible) {
            event.preventDefault();
            // Retourner √† l'univers principal
            filterContentByCategory('universe');
            return true;
        }

        // Si aucune interface sp√©ciale n'est ouverte, laisser le comportement par d√©faut
        return false;
    }

    // Intercepter la touche retour sur ordinateurs
    window.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' || event.key === 'Backspace' && document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
            handleBackButton(event);
        }
    });

    // Intercepter la touche retour sur mobile et autres appareils
    window.addEventListener('popstate', function(event) {
        // Si une interface sp√©ciale est ouverte, emp√™cher le retour par d√©faut et ex√©cuter notre fonction de retour
        if (handleBackButton(event)) {
            // Ajouter un √©tat dans l'historique pour maintenir le comportement coh√©rent
            history.pushState(null, document.title, window.location.href);
        }
    });

    // Initialiser l'historique pour intercepter popstate
    history.pushState(null, document.title, window.location.href);
});



//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü£ JS PARTIE 3
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


// Script pour le bouton de cr√©ation
document.addEventListener('DOMContentLoaded', function() {
    const creationButton = document.querySelector('.creation-button');
    const creationItems = document.querySelectorAll('.creation-item');
    
    // Animation au clic sur le bouton
    creationButton.addEventListener('click', function() {
        this.classList.add('clicked');
        
        // Effet de connexion avec les id√©es
        setTimeout(() => {
            this.classList.remove('clicked');
        }, 600);
    });
    

});


/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üü† JS PARTIE 4
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/


// Script pour le modal de cr√©ation
document.addEventListener('DOMContentLoaded', function() {
    // R√©f√©rence aux √©l√©ments DOM
    const creationMenu = document.querySelector('.creation-menu');
    const creationItems = document.querySelectorAll('.creation-item');
    const modal = document.getElementById('creation-modal');
    const closeBtn = modal.querySelector('.close-modal');
    const cancelBtn = modal.querySelector('.cancel-btn');
    const createBtn = modal.querySelector('.create-btn');
    const typeOptions = modal.querySelectorAll('.type-option');
    const titleInput = document.getElementById('title-input');
    const descriptionInput = document.getElementById('description-input');
    const tagsInput = document.getElementById('tags-input');
    const tagsList = modal.querySelector('.tags-list');
    const priorityOptions = modal.querySelectorAll('.priority-option');
    const charCounter = modal.querySelector('.char-counter');
    const categoryGrid = modal.querySelector('.category-grid');
    
    // Variables pour stocker les donn√©es s√©lectionn√©es
    let selectedType = null;
    let selectedCategory = null;
    let selectedPriority = null;
    let currentTags = [];
    
    // Images par type
    const typeImages = {
        'dossier': ["üìÅ", "üìÇ", "üóÇÔ∏è"],
        'note': ["üìù", "üìÑ", "üìÉ"],
        'chat': ["üó®Ô∏è", "üí≠", "üí¨"]
    };
    
    // Configuration des cat√©gories √† partir de la navigation principale
    function populateCategories() {
        categoryGrid.innerHTML = '';
        
        // Utiliser les √©l√©ments de la navigation principale comme cat√©gories
        const navItems = document.querySelectorAll('.main-nav .nav-item');
        
        navItems.forEach(item => {
            const category = item.dataset.category;
            // Exclure "Mon univers" et "Identity"
            if (category !== 'universe' && category !== 'Identity') {
                const emoji = item.innerText.trim();
                const tooltip = item.querySelector('.tooltip').innerText;
                
                const categoryItem = document.createElement('div');
                categoryItem.className = 'category-item';
                categoryItem.dataset.category = category;
                categoryItem.innerHTML = `
                    <div class="category-icon">${emoji}</div>
                    <div class="category-name">${tooltip}</div>
                `;
                
                categoryItem.addEventListener('click', () => {
                    modal.querySelectorAll('.category-item').forEach(item => {
                        item.classList.remove('selected');
                    });
                    categoryItem.classList.add('selected');
                    selectedCategory = category;
                });
                
                categoryGrid.appendChild(categoryItem);
            }
        });
    }
    
    // Associer les √©v√©nements aux √©l√©ments du menu de cr√©ation
    creationItems.forEach(item => {
        item.addEventListener('click', () => {
            selectedType = item.dataset.type;
            openCreationModal(selectedType);
            // Masquer le menu de cr√©ation
            document.querySelector('.creation-menu').style.display = 'none';
        });
    });
    
    // Ouvrir le modal de cr√©ation
    function openCreationModal(type) {
              // R√©initialiser le formulaire
        resetForm();
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden'; // Emp√™cher le d√©filement
        

        
        // Pr√©-s√©lectionner le type
        typeOptions.forEach(option => {
            if (option.dataset.type === type) {
                option.classList.add('selected');
                selectedType = type;
                
                // Mettre √† jour l'indicateur de type
                const typeIndicator = modal.querySelector('.type-indicator');
                typeIndicator.dataset.type = type;
                
                const typeIcon = {
                    'dossier': 'üìÅ',
                    'note': 'üìù',
                    'chat': 'üí¨'
                }[type];
                
                typeIndicator.querySelector('.type-icon').textContent = typeIcon;
                
                // Mettre √† jour le titre du modal
                let modalTitle = 'Cr√©er un nouveau ';
                if (type === 'dossier') modalTitle += 'dossier';
                else if (type === 'note') modalTitle += 'note';
                else if (type === 'chat') modalTitle += 'chat';
                
                modal.querySelector('.modal-title').textContent = modalTitle;
            }
        });
        
        // Peupler les cat√©gories
        populateCategories();
        
        // Ajouter des particules d'animation
        createParticles();
        
        // Focus sur le champ de titre
        setTimeout(() => {
            titleInput.focus();
        }, 300);
    }
    
    // Gestion des clics sur les options de type
    typeOptions.forEach(option => {
        option.addEventListener('click', () => {
            typeOptions.forEach(opt => opt.classList.remove('selected'));
            option.classList.add('selected');
            selectedType = option.dataset.type;
            
            // Mettre √† jour l'indicateur de type
            const typeIndicator = modal.querySelector('.type-indicator');
            typeIndicator.dataset.type = selectedType;
            
            const typeIcon = {
                'dossier': 'üìÅ',
                'note': 'üìù',
                'chat': 'üí¨'
            }[selectedType];
            
            typeIndicator.querySelector('.type-icon').textContent = typeIcon;
            
            // Mettre √† jour le titre du modal
            let modalTitle = 'Cr√©er un nouveau ';
            if (selectedType === 'dossier') modalTitle += 'dossier';
            else if (selectedType === 'note') modalTitle += 'note';
            else if (selectedType === 'chat') modalTitle += 'chat';
            
            modal.querySelector('.modal-title').textContent = modalTitle;
        });
    });
    
    // Gestion des clics sur les options de priorit√©
    priorityOptions.forEach(option => {
        option.addEventListener('click', () => {
            priorityOptions.forEach(opt => opt.classList.remove('selected'));
            option.classList.add('selected');
            selectedPriority = option.dataset.priority;
        });
    });
    
    // Gestion du compteur de caract√®res pour le titre
    titleInput.addEventListener('input', () => {
        const length = titleInput.value.length;
        charCounter.textContent = `${length}/100`;
        
        // Mettre √† jour la couleur en fonction de la longueur
        if (length > 80) {
            charCounter.style.color = '#ef4444';
        } else if (length > 50) {
            charCounter.style.color = '#f59e0b';
        } else {
            charCounter.style.color = '';
        }
    });
    
    // Gestion des tags
    tagsInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ',') {
            e.preventDefault();
            const tagText = tagsInput.value.trim();
            
            if (tagText && currentTags.length < 3) {
                // V√©rifier que le tag n'est pas d√©j√† dans la liste
                if (!currentTags.includes(tagText)) {
                    addTag(tagText);
                    tagsInput.value = '';
                }
            }
        }
    });
    
    function addTag(text) {
        currentTags.push(text);
        
        const tag = document.createElement('div');
        tag.className = 'tag';
        tag.innerHTML = `
            ${text}
            <span class="tag-remove">&times;</span>
        `;
        
        tag.querySelector('.tag-remove').addEventListener('click', () => {
            tag.remove();
            currentTags = currentTags.filter(t => t !== text);
        });
        
        tagsList.appendChild(tag);
    }
    
// Fermer le modal
function closeModal() {
    modal.style.display = 'none';
    document.body.style.overflow = ''; // R√©activer le d√©filement
    
    // R√©initialiser compl√®tement le formulaire et supprimer l'animation de succ√®s
    resetForm();
}

    
    closeBtn.addEventListener('click', closeModal);
    cancelBtn.addEventListener('click', closeModal);
    
    // Cliquer en dehors du modal pour le fermer
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
    
// R√©initialiser le formulaire
function resetForm() {
    selectedCategory = null;
    selectedPriority = null;
    currentTags = [];
    
    titleInput.value = '';
    descriptionInput.value = '';
    tagsInput.value = '';
    tagsList.innerHTML = '';
    charCounter.textContent = '0/100';
    
    typeOptions.forEach(opt => opt.classList.remove('selected'));
    priorityOptions.forEach(opt => opt.classList.remove('selected'));
    
    // Supprimer l'overlay de succ√®s s'il existe
    const overlay = modal.querySelector('.success-overlay');
    if (overlay) {
        overlay.remove();
    }
    
    // R√©initialiser les classes d'animation de succ√®s
    const content = modal.querySelector('.creation-modal-content');
    content.classList.remove('creation-success');
    
    // R√©initialiser les erreurs
    modal.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
}

    
    // Animation de particules
    function createParticles() {
        const container = modal.querySelector('.quantum-particles');
        container.innerHTML = '';
        
        for (let i = 0; i < 15; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // Position initiale al√©atoire
            const x = Math.random() * 100;
            const y = Math.random() * 100;
            
            // Direction al√©atoire
            const tx = (Math.random() - 0.5) * 200;
            const ty = (Math.random() - 0.5) * 200;
            
            particle.style.left = `${x}%`;
            particle.style.top = `${y}%`;
            particle.style.setProperty('--tx', `${tx}px`);
            particle.style.setProperty('--ty', `${ty}px`);
            
            // Couleur al√©atoire
            const hue = 220 + Math.random() * 60;
            particle.style.background = `hsl(${hue}, 70%, 60%)`;
            
            // Animation avec d√©lai al√©atoire
            const delay = Math.random() * 4;
            const duration = 2 + Math.random() * 2;
            particle.style.animation = `particleAnimation ${duration}s ${delay}s infinite`;
            
            container.appendChild(particle);
        }
    }
    
// Cr√©ation d'un nouvel √©l√©ment
createBtn.addEventListener('click', async () => {
  // √Ä ajouter au d√©but de la fonction du bouton createBtn
console.log("D√©but cr√©ation - Type:", selectedType);
console.log("Cat√©gorie:", selectedCategory);
console.log("Titre:", titleInput.value);
console.log("Priorit√©:", selectedPriority);

    console.log("Bouton cr√©er cliqu√©");
    // V√©rifier que les champs obligatoires sont remplis
    if (!selectedType || !selectedCategory || !titleInput.value || !selectedPriority) {
        console.log("Champs manquants:", {
            type: selectedType,
            category: selectedCategory,
            title: titleInput.value,
            priority: selectedPriority
        });
        
        // Mettre en √©vidence les champs manquants
        if (!selectedType) {
            modal.querySelector('.type-selection').classList.add('error');
        }
        if (!selectedCategory) {
            modal.querySelector('.category-selector').classList.add('error');
        }
        if (!titleInput.value) {
            titleInput.classList.add('error');
        }
        if (!selectedPriority) {
            modal.querySelector('.priority-options').classList.add('error');
        }
        return;
    }
    
    // Traiter les tags s'il y a du texte dans l'input mais pas encore ajout√© √† la liste
    if (tagsInput.value.trim()) {
        // Diviser l'entr√©e par les virgules et traiter chaque partie comme un tag s√©par√©
        const inputTags = tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag);
        
        // Ajouter chaque tag non d√©j√† inclus, jusqu'√† la limite de 3 tags au total
        inputTags.forEach(tagText => {
            if (!currentTags.includes(tagText) && currentTags.length < 3) {
                addTag(tagText);
            }
        });
    }

    // Cr√©er l'objet de donn√©es
    const newItem = {
        category: selectedCategory,
        type: selectedType,
        title: titleInput.value,
        date: new Date().toISOString().split('T')[0], // Format YYYY-MM-DD
        description: descriptionInput.value || null,
        images: typeImages[selectedType],
        tags: currentTags,
        priority: selectedPriority
    };
    
    console.log("Nouvel √©l√©ment cr√©√©:", newItem);
    
    // Animation de cr√©ation en cours
    const content = modal.querySelector('.creation-modal-content');
    content.classList.add('creating');
    
    // Enregistrer dans Supabase
    const success = await saveElementToSupabase(newItem);
    
    if (success) {
        // Ajouter l'√©l√©ment √† sampleData
        window.sampleData.push(newItem);
        
        highlightNewElement(newItem.title);
        
        // Actualiser la grille
        populateGrid();
        
        // Mettre √† jour les compteurs
        updateCategoryCounts();
        
        // Mettre √† jour l'ordre des √©l√©ments de navigation
        updateNavOrder();
        
        // Si la cat√©gorie actuelle est celle qui vient d'√™tre ajout√©e, mettre √† jour l'affichage
        const activeNavItem = document.querySelector('.nav-item.active');
        if (activeNavItem && activeNavItem.dataset.category === selectedCategory) {
            filterContentByCategory(selectedCategory);
        } else {
            // Sinon, filtrer pour afficher tous les √©l√©ments
            filterContentByCategory('universe');
        }
        
        // Animation de cr√©ation r√©ussie
        createSuccessAnimation();
        
        // Fermer le modal
        setTimeout(() => {
            closeModal();
            // R√©-afficher la grille apr√®s la fermeture
            document.getElementById('contentGrid').style.display = 'grid';
        }, 1500);
    } else {
        // En cas d'erreur
        content.classList.remove('creating');
        
        // Afficher un message d'erreur
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.textContent = "Une erreur est survenue lors de l'enregistrement. Veuillez r√©essayer.";
        content.appendChild(errorMessage);
        
        setTimeout(() => {
            errorMessage.remove();
        }, 3000);
    }
});



    
    // Animation de succ√®s
    function createSuccessAnimation() {
        const content = modal.querySelector('.creation-modal-content');
        content.classList.add('creation-success');
        
        // Ajouter une superposition d'animation
        const overlay = document.createElement('div');
        overlay.className = 'success-overlay';
        overlay.innerHTML = `
            <div class="success-icon">‚úì</div>
            <div class="success-message">√âl√©ment cr√©√© avec succ√®s!</div>
        `;
        content.appendChild(overlay);
        
        // Styles pour l'animation de succ√®s
        const style = document.createElement('style');
        style.innerHTML = `
            .creation-success {
                position: relative;
                overflow: hidden;
            }
            
            .success-overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, var(--accent-1), var(--accent-2));
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                animation: slideIn 0.5s cubic-bezier(0.19, 1, 0.22, 1) forwards;
                z-index: 10;
            }
            
            .success-icon {
                font-size: 3rem;
                color: white;
                background: rgba(255, 255, 255, 0.2);
                width: 80px;
                height: 80px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-bottom: 20px;
                animation: scaleIn 0.5s 0.2s cubic-bezier(0.34, 1.56, 0.64, 1) both;
            }
            
            .success-message {
                font-size: 1.5rem;
                color: white;
                font-weight: 600;
                animation: fadeIn 0.5s 0.4s both;
            }
            
            @keyframes slideIn {
                from { transform: translateY(100%); }
                to { transform: translateY(0); }
            }
            
            @keyframes scaleIn {
                from { transform: scale(0); opacity: 0; }
                to { transform: scale(1); opacity: 1; }
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }
        `;
        document.head.appendChild(style);
    }
    
    // Associer la fonctionnalit√© aux √©l√©ments du menu principal
    const creationButton = document.querySelector('.creation-button');
    const creationMenuItems = document.querySelectorAll('.creation-menu .creation-item');
    
    creationButton.addEventListener('click', () => {
        creationMenu.style.display = creationMenu.style.display === 'flex' ? 'none' : 'flex';
    });
    
    document.addEventListener('click', (event) => {
        if (!event.target.closest('.creation-hub')) {
            creationMenu.style.display = 'none';
        }
    });

    // Ajouter au style existant pour le menu de cr√©ation
    const creationMenuStyle = document.createElement('style');
    creationMenuStyle.innerHTML = `
        .creation-menu {
            position: absolute;
            bottom: 90px;
            right: 30px;
            background: var(--bg-secondary);
            border-radius: 16px;
            padding: 10px;
            display: none;
            flex-direction: column;
            gap: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            animation: slideUp 0.3s cubic-bezier(0.19, 1, 0.22, 1);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        .creation-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .creation-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }
        
        .icon-container {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        
        .creation-icon {
            width: 24px;
            height: 24px;
            fill: currentColor;
        }
        
        .creation-item[data-type="dossier"] {
            color: #f59e0b;
        }
        
        .creation-item[data-type="note"] {
            color: #34d399;
        }
        
        .creation-item[data-type="chat"] {
            color: #60a5fa;
        }
        
        .creation-hub {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 1000;
        }
        
        .creation-button {
            width: 60px;
            height: 60px;
            cursor: pointer;
            filter: drop-shadow(0 5px 15px rgba(0, 0, 0, 0.3));
            transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
        }
        
        .creation-button:hover {
            transform: scale(1.1);
        }
        
        .creation-button.clicked .button-bg {
            animation: pulse 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
        }
        
        .creation-button.clicked .idea-pulse {
            animation: ideaPulse 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        @keyframes ideaPulse {
            0% { opacity: 0; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1.1); }
            100% { opacity: 0; transform: scale(1.4); }
        }
        
        .orbit {
            fill: none;
            stroke: rgba(255, 255, 255, 0.2);
            stroke-width: 1;
            stroke-dasharray: 5 3;
            animation: rotate 30s linear infinite;
        }
        
        .orbit:nth-child(2) {
            animation-duration: 40s;
            animation-direction: reverse;
        }
        
        .particle {
            fill: white;
            opacity: 0.7;
            animation: moveParticle 10s ease-in-out infinite;
        }
        
        .particle-1 {
            animation-duration: 15s;
        }
        
        .particle-2 {
            animation-duration: 20s;
            animation-delay: 2s;
        }
        
        .particle-3 {
            animation-duration: 25s;
            animation-delay: 5s;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        @keyframes moveParticle {
            0%, 100% { transform: translate(0, 0); }
            50% { transform: translate(10px, -10px); }
        }
        
        /* Style pour le bouton et menu sur mobile */
        @media (max-width: 768px) {
            .creation-hub {
                bottom: 20px;
                right: 20px;
            }
            
            .creation-button {
                width: 50px;
                height: 50px;
            }
            
            .creation-menu {
                bottom: 80px;
                right: 20px;
            }
        }
    `;
    document.head.appendChild(creationMenuStyle);
});

// Fonction pour mettre en √©vidence les nouveaux √©l√©ments ajout√©s
function highlightNewElement(title) {
    setTimeout(() => {
        const cards = document.querySelectorAll('.content-card');
        cards.forEach(card => {
            if (card.dataset.title === title) {
                card.classList.add('new-element');
                setTimeout(() => {
                    card.classList.remove('new-element');
                }, 3000);
            }
        });
    }, 100);
}


// Variables pour le modal d'√©dition
let editCurrentTags = [];
let editSelectedCategory = null;
let editSelectedPriority = null;

// Fonction pour ouvrir le modal d'√©dition
function openEditModal(id, card) {
    console.log("Ouverture du modal d'√©dition pour ID:", id); // Debug
    
    const editModal = document.getElementById('edit-modal');
    const element = window.sampleData.find(item => item.id === id);
    
    if (!element) {
        console.error('√âl√©ment non trouv√© avec ID:', id);
        return;
    }
    
    // Remplir le modal avec les donn√©es de l'√©l√©ment
    const editIdInput = document.getElementById('edit-id');
    const editTitleInput = document.getElementById('edit-title-input');
    const editDescInput = document.getElementById('edit-description-input');
    const editTagsList = document.querySelector('.edit-tags-list');
    
    editIdInput.value = id;
    editTitleInput.value = element.title;
    editDescInput.value = element.description || '';
    
    // R√©initialiser les tags
    editCurrentTags = [...element.tags];
    editTagsList.innerHTML = '';
    
    editCurrentTags.forEach(tag => {
        addEditTag(tag);
    });
    
    // S√©lectionner la cat√©gorie
    editSelectedCategory = element.category;
    populateEditCategories();
    
    // S√©lectionner la priorit√©
    editSelectedPriority = element.priority;
    document.querySelectorAll('.edit-priority-options .priority-option').forEach(option => {
        if (option.dataset.priority === editSelectedPriority) {
            option.classList.add('selected');
        } else {
            option.classList.remove('selected');
        }
    });
    
    // Mettre √† jour le compteur de caract√®res
    const charCounter = editModal.querySelector('.char-counter');
    charCounter.textContent = `${editTitleInput.value.length}/100`;
    
    // Afficher le modal
    editModal.style.display = 'flex';
    document.body.style.overflow = 'hidden'; // Emp√™cher le d√©filement
    
    // Focus sur le champ de titre
    setTimeout(() => {
        editTitleInput.focus();
    }, 300);
}


// Fonction pour peupler les cat√©gories dans le modal d'√©dition
function populateEditCategories() {
    const categoryGrid = document.querySelector('.edit-category-grid');
    categoryGrid.innerHTML = '';
    
    // Utiliser les √©l√©ments de la navigation principale comme cat√©gories
    const navItems = document.querySelectorAll('.main-nav .nav-item');
    
    navItems.forEach(item => {
        const category = item.dataset.category;
        // Exclure "Mon univers" et "Identity"
        if (category !== 'universe' && category !== 'Identity') {
            const emoji = item.innerText.trim();
            const tooltip = item.querySelector('.tooltip').innerText;
            
            const categoryItem = document.createElement('div');
            categoryItem.className = 'category-item';
            categoryItem.dataset.category = category;
            
            // S√©lectionner la cat√©gorie active
            if (category === editSelectedCategory) {
                categoryItem.classList.add('selected');
            }
            
            categoryItem.innerHTML = `
                <div class="category-icon">${emoji}</div>
                <div class="category-name">${tooltip}</div>
            `;
            
            categoryItem.addEventListener('click', () => {
                document.querySelectorAll('.edit-category-grid .category-item').forEach(item => {
                    item.classList.remove('selected');
                });
                categoryItem.classList.add('selected');
                editSelectedCategory = category;
            });
            
            categoryGrid.appendChild(categoryItem);
        }
    });
}

// Fonction pour ajouter un tag dans le modal d'√©dition
function addEditTag(text) {
    const tag = document.createElement('div');
    tag.className = 'tag';
    tag.innerHTML = `
        ${text}
        <span class="tag-remove">&times;</span>
    `;
    
    tag.querySelector('.tag-remove').addEventListener('click', () => {
        tag.remove();
        editCurrentTags = editCurrentTags.filter(t => t !== text);
    });
    
    document.querySelector('.edit-tags-list').appendChild(tag);
}

// Gestionnaire d'√©v√©nement pour le champ de tags du modal d'√©dition
document.getElementById('edit-tags-input')?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ',') {
        e.preventDefault();
        const tagText = e.target.value.trim();
        
        if (tagText && editCurrentTags.length < 3) {
            // V√©rifier que le tag n'est pas d√©j√† dans la liste
            if (!editCurrentTags.includes(tagText)) {
                editCurrentTags.push(tagText);
                addEditTag(tagText);
                e.target.value = '';
            }
        }
    }
});

// Gestionnaire d'√©v√©nement pour les options de priorit√© du modal d'√©dition
document.querySelectorAll('.edit-priority-options .priority-option').forEach(option => {
    option.addEventListener('click', () => {
        document.querySelectorAll('.edit-priority-options .priority-option').forEach(opt => {
            opt.classList.remove('selected');
        });
        option.classList.add('selected');
        editSelectedPriority = option.dataset.priority;
    });
});

// Gestionnaire d'√©v√©nement pour le bouton de mise √† jour
document.querySelector('#edit-modal .update-btn')?.addEventListener('click', async function() {
    const id = document.getElementById('edit-id').value;
    const title = document.getElementById('edit-title-input').value;
    const description = document.getElementById('edit-description-input').value;
    
    console.log("Mise √† jour de l'√©l√©ment avec ID:", id);
    
    // V√©rifier que les champs obligatoires sont remplis
    if (!title || !editSelectedCategory || !editSelectedPriority) {
        // Mettre en √©vidence les champs manquants
        if (!title) {
            document.getElementById('edit-title-input').classList.add('error');
        }
        if (!editSelectedCategory) {
            document.querySelector('.edit-category-grid').parentElement.classList.add('error');
        }
        if (!editSelectedPriority) {
            document.querySelector('.edit-priority-options').classList.add('error');
        }
        return;
    }
    
    // Cr√©er l'objet de mises √† jour
    const updates = {
        title,
        category: editSelectedCategory,
        description: description || null,
        tags: editCurrentTags,
        priority: editSelectedPriority
    };
    
    // Animation de mise √† jour en cours
    const content = document.querySelector('#edit-modal .creation-modal-content');
    content.classList.add('updating');
    
    try {
        // V√©rifier si c'est un √©l√©ment de d√©monstration ou un √©l√©ment de Supabase
        if (id.startsWith('demo-')) {
            // √âl√©ment de d√©monstration, mise √† jour locale seulement
            const index = window.sampleData.findIndex(item => item.id === id);
            if (index !== -1) {
                window.sampleData[index] = {
                    ...window.sampleData[index],
                    ...updates
                };
            }
            
            // Simuler un d√©lai pour l'animation
            await new Promise(resolve => setTimeout(resolve, 800));
            
            // Consid√©rer comme un succ√®s
            success = true;
        } else {
            // √âl√©ment de Supabase, appel √† l'API
            success = await updateElementInSupabase(id, updates);
        }
        
        if (success) {
            // Si c'est un √©l√©ment Supabase, mettre √©galement √† jour le tableau local
            if (!id.startsWith('demo-')) {
                const index = window.sampleData.findIndex(item => item.id === id);
                if (index !== -1) {
                    window.sampleData[index] = {
                        ...window.sampleData[index],
                        ...updates
                    };
                }
            }
            
            // Actualiser la grille
            populateGrid();
            
            // Mettre √† jour les compteurs
            updateCategoryCounts();
            
            // Mettre √† jour l'ordre des √©l√©ments de navigation
            updateNavOrder();
            
            // Animation de mise √† jour r√©ussie
            createEditSuccessAnimation();
            
            // Fermer le modal
            setTimeout(() => {
                closeEditModal();
            }, 1500);
        } else {
            throw new Error("√âchec de la mise √† jour");
        }
    } catch (error) {
        console.error("Erreur lors de la mise √† jour:", error);
        
        // En cas d'erreur
        content.classList.remove('updating');
        
        // Afficher un message d'erreur
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.textContent = "Une erreur est survenue lors de la mise √† jour. Veuillez r√©essayer.";
        content.appendChild(errorMessage);
        
        setTimeout(() => {
            errorMessage.remove();
        }, 3000);
    }
});


// Fonction pour fermer le modal d'√©dition
function closeEditModal() {
    const editModal = document.getElementById('edit-modal');
    editModal.style.display = 'none';
    document.body.style.overflow = ''; // R√©activer le d√©filement
}

// Gestionnaire d'√©v√©nement pour le bouton de fermeture du modal d'√©dition
document.querySelector('#edit-modal .close-modal')?.addEventListener('click', closeEditModal);

// Gestionnaire d'√©v√©nement pour le bouton d'annulation du modal d'√©dition
document.querySelector('#edit-modal .cancel-btn')?.addEventListener('click', closeEditModal);

// Fermer le modal en cliquant en dehors
document.getElementById('edit-modal')?.addEventListener('click', (e) => {
    if (e.target === document.getElementById('edit-modal')) {
        closeEditModal();
    }
});

// Animation de succ√®s pour l'√©dition
function createEditSuccessAnimation() {
    const content = document.querySelector('#edit-modal .creation-modal-content');
    content.classList.add('edit-success');
    
    // Ajouter une superposition d'animation
    const overlay = document.createElement('div');
    overlay.className = 'success-overlay';
    overlay.innerHTML = `
        <div class="success-icon">‚úì</div>
        <div class="success-message">√âl√©ment mis √† jour avec succ√®s!</div>
    `;
    content.appendChild(overlay);
}

// Gestionnaire pour le compteur de caract√®res dans le modal d'√©dition
document.getElementById('edit-title-input')?.addEventListener('input', (e) => {
    const charCounter = document.querySelector('#edit-modal .char-counter');
    const length = e.target.value.length;
    
    charCounter.textContent = `${length}/100`;
    
    // Mettre √† jour la couleur en fonction de la longueur
    if (length > 80) {
        charCounter.style.color = '#ef4444';
    } else if (length > 50) {
        charCounter.style.color = '#f59e0b';
    } else {
        charCounter.style.color = '';
    }
});



//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üî¥ JS PARTIE 5
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

// V√©rifier l'authentification Supabase
async function checkSupabaseSession() {
    try {
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
            console.error('Erreur lors de la v√©rification de la session:', error);
            return false;
        }
        
        return data.session !== null;
    } catch (error) {
        console.error('Erreur lors de la v√©rification de la session:', error);
        return false;
    }
}


document.addEventListener('DOMContentLoaded', function() {
    // Syst√®me d'authentification
    const authContainer = document.getElementById('authContainer');
    const authForm = document.getElementById('authForm');
    const passwordInput = document.getElementById('passwordInput');
    const authButton = document.getElementById('authButton');
    const authFeedback = document.getElementById('authFeedback');
    const togglePassword = document.getElementById('togglePassword');
    const alternativeAuthBtn = document.getElementById('alternativeAuthBtn');
    const questionContainer = document.getElementById('questionContainer');
    const closeQuestionBtn = document.getElementById('closeQuestionBtn');
    const symbolsGrid = document.getElementById('symbolsGrid');
    const personalDateInput = document.getElementById('personalDateInput');
    const personalPhraseInput = document.getElementById('personalPhraseInput');
    const verifyIdentityBtn = document.getElementById('verifyIdentityBtn');
    const questionFeedback = document.getElementById('questionFeedback');
    const authProgress = document.getElementById('authProgress');
    const authLoading = document.getElementById('authLoading');
    
    // Animation des lettres du nom
    const letters = document.querySelectorAll('.auth-letter');
    letters.forEach(letter => {
        letter.classList.add('auth-letter-animation');
    });
    
    // Afficher le sous-titre apr√®s l'animation des lettres
    setTimeout(() => {
        document.querySelector('.auth-name-subtitle').classList.add('visible');
        authForm.classList.add('visible');
    }, 1500);
    
    // Montrer/cacher le mot de passe
    togglePassword.addEventListener('click', function() {
        const type = passwordInput.type === 'password' ? 'text' : 'password';
        passwordInput.type = type;
        
        // Changer l'ic√¥ne
        this.innerHTML = type === 'password' 
            ? '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>' 
            : '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>';
    });
    
// V√©rification du mot de passe principal
authButton.addEventListener('click', async function() {
    const password = passwordInput.value;
    
    try {
        // V√©rifier le mot de passe avec Supabase
        // Note: Dans une application r√©elle, utilisez une fonction RPC Supabase pour cette v√©rification
        // Cette approche simplifi√©e n'est pas recommand√©e pour la production
        
        // Mot de passe local pour le d√©veloppement
        if (password === "01Jeanlik2003@") {
            authFeedback.textContent = "Authentification r√©ussie";
            authFeedback.className = "auth-feedback visible success";
            
            // Authentification r√©ussie, stockons une session dans localStorage
            localStorage.setItem('isAuthenticated', 'true');
            
            // Afficher l'√©cran de chargement
            setTimeout(() => {
                authLoading.classList.remove('hidden');
                
                // Disparition progressive apr√®s le chargement
                setTimeout(() => {
                    authLoading.style.opacity = '0';
                    setTimeout(() => {
                        authContainer.style.opacity = '0';
                        setTimeout(() => {
                            authContainer.remove();
                        }, 1000);
                    }, 500);
                }, 2000);
            }, 1000);
        } else {
            // Mot de passe incorrect
            authFeedback.textContent = "Mot de passe incorrect";
            authFeedback.className = "auth-feedback visible error";
            
            // Effet visuel d'erreur
            passwordInput.classList.add('auth-input-error');
            setTimeout(() => {
                passwordInput.classList.remove('auth-input-error');
            }, 500);
            
            // Cr√©er un effet de vibration
            authForm.classList.add('shake');
            setTimeout(() => {
                authForm.classList.remove('shake');
            }, 500);
        }
    } catch (error) {
        console.error('Erreur lors de l\'authentification:', error);
        authFeedback.textContent = "Erreur lors de l'authentification";
        authFeedback.className = "auth-feedback visible error";
    }
});

    
    // Fonction pour cr√©er des pulsations visuelles al√©atoires
    function createPulseEffect() {
        const pulse = document.createElement('div');
        pulse.className = 'pulse-effect';
        
        // Position al√©atoire
        const x = Math.random() * window.innerWidth;
        const y = Math.random() * window.innerHeight;
        pulse.style.left = `${x}px`;
        pulse.style.top = `${y}px`;
        
        // Taille al√©atoire
        const size = 50 + Math.random() * 100;
        pulse.style.width = `${size}px`;
        pulse.style.height = `${size}px`;
        
        authContainer.appendChild(pulse);
        
        // Supprimer l'√©l√©ment apr√®s l'animation
        setTimeout(() => {
            pulse.remove();
        }, 2000);
    }
    
    // Cr√©er des effets de pulsation p√©riodiquement
    setInterval(createPulseEffect, 3000);
    
    // M√©thode d'authentification alternative
    alternativeAuthBtn.addEventListener('click', function() {
        questionContainer.classList.add('visible');
        populateSymbolsGrid();
    });
    
    closeQuestionBtn.addEventListener('click', function() {
        questionContainer.classList.remove('visible');
    });
    
    // G√©n√©rer la grille de symboles
    function populateSymbolsGrid() {
        // Tous les symboles possibles
        const allSymbols = [
            'üåê', '‚¨áÔ∏è', 'üì±', 'üçú', 'üîç', 'üé¨', 'üíª', 'ü§ñ', 'üéÑ', 'üåç',
            'üí≠', '‚ö°', '‚ú®', 'üß†', 'üîë', 'üéµ', 'üìö', '‚è≥', 'üéÆ', 'üèÜ',
            'üè†', 'üîÜ', 'üåà', 'üß©', 'üöÄ', 'üìÜ', 'üí°', 'üîÑ', 'üëÅÔ∏è', 'üé≠'
        ];
        
        // Les symboles corrects (qui ont une signification pour vous)
        const correctSymbols = ['üåê', '‚¨áÔ∏è', 'üì±', 'üçú', 'üîç', 'üé¨', 'üíª', 'ü§ñ', 'üéÑ'];
        
        // M√©langer les symboles
        const shuffledSymbols = [...allSymbols].sort(() => Math.random() - 0.5);
        
        // Limiter √† 9 symboles pour la grille 3x3
        const gridSymbols = shuffledSymbols.slice(0, 9);
        
        // S'assurer qu'au moins 3 symboles corrects sont pr√©sents
        let correctCount = gridSymbols.filter(s => correctSymbols.includes(s)).length;
        
        if (correctCount < 3) {
            // Remplacer des symboles al√©atoires par des corrects
            while (correctCount < 3) {
                const randomIndex = Math.floor(Math.random() * 9);
                if (!correctSymbols.includes(gridSymbols[randomIndex])) {
                    // Prendre un symbole correct qui n'est pas d√©j√† dans la grille
                    const availableCorrectSymbols = correctSymbols.filter(s => !gridSymbols.includes(s));
                    if (availableCorrectSymbols.length > 0) {
                        gridSymbols[randomIndex] = availableCorrectSymbols[0];
                        correctCount++;
                    }
                }
            }
        }
        
        // Remplir la grille
        symbolsGrid.innerHTML = '';
        gridSymbols.forEach(symbol => {
            const item = document.createElement('div');
            item.className = 'auth-grid-item';
            item.innerHTML = `<span class="auth-grid-icon">${symbol}</span>`;
            
            item.addEventListener('click', function() {
                this.classList.toggle('selected');
                updateProgressBar();
            });
            
            symbolsGrid.appendChild(item);
        });
    }
    
    // Mettre √† jour la barre de progression
    function updateProgressBar() {
        const selectedSymbols = document.querySelectorAll('.auth-grid-item.selected').length;
        const dateValue = personalDateInput.value.trim();
        const phraseValue = personalPhraseInput.value.trim();
        
        // Calculer la progression (symboles + date + phrase)
        let progress = 0;
        if (selectedSymbols > 0) progress += 33.3;
        if (dateValue) progress += 33.3;
        if (phraseValue) progress += 33.3;
        
        authProgress.style.width = `${progress}%`;
    }
    
    // √âcouter les entr√©es pour mettre √† jour la progression
    personalDateInput.addEventListener('input', updateProgressBar);
    personalPhraseInput.addEventListener('input', updateProgressBar);
    
    // V√©rification de l'identit√©

verifyIdentityBtn.addEventListener('click', function() {
    const selectedSymbols = Array.from(document.querySelectorAll('.auth-grid-item.selected')).map(
        item => item.querySelector('.auth-grid-icon').textContent
    );
    
    const dateValue = personalDateInput.value.trim();
    const phraseValue = personalPhraseInput.value.trim().toLowerCase();
    
    // Les symboles corrects
    const correctSymbols = ['üåê', '‚¨áÔ∏è', 'üì±', 'üçú', 'üîç', 'üé¨', 'üíª', 'ü§ñ', 'üéÑ'];
    
    // V√©rification stricte des symboles:
    // 1. Au moins 3 symboles corrects doivent √™tre s√©lectionn√©s
    // 2. AUCUN symbole incorrect ne doit √™tre s√©lectionn√©
    const correctSelectedSymbols = selectedSymbols.filter(s => correctSymbols.includes(s));
    const incorrectSelectedSymbols = selectedSymbols.filter(s => !correctSymbols.includes(s));
    const hasEnoughCorrectSymbols = correctSelectedSymbols.length >= 3;
    const hasNoIncorrectSymbols = incorrectSelectedSymbols.length === 0;
    const symbolCheckPassed = hasEnoughCorrectSymbols && hasNoIncorrectSymbols;
    
    // V√©rification stricte de la date (format exact requis)
    const isDateValid = dateValue === "01/04/2003";
    
    // V√©rification stricte de la phrase personnelle
    // Au moins 3 mots cl√©s sp√©cifiques doivent √™tre pr√©sents
    const phraseKeywords = ['conscience', 'univers', 'mental', 'jean', 'louis', 'likula', 'moi', 'cerveau'];
    const matchedKeywords = phraseKeywords.filter(word => phraseValue.includes(word));
    const phraseCheckPassed = matchedKeywords.length >= 3;
    
    // Validation UNIQUEMENT si TOUTES les v√©rifications r√©ussissent
    if (symbolCheckPassed && isDateValid && phraseCheckPassed) {
        questionFeedback.textContent = "Identit√© confirm√©e";
        questionFeedback.className = "auth-feedback visible success";
        
        // Afficher l'√©cran de chargement
        setTimeout(() => {
            questionContainer.classList.remove('visible');
            authLoading.classList.remove('hidden');
            
            // Disparition progressive apr√®s le chargement
            setTimeout(() => {
                authLoading.style.opacity = '0';
                setTimeout(() => {
                    authContainer.style.opacity = '0';
                    setTimeout(() => {
                        authContainer.remove();
                    }, 1000);
                }, 500);
            }, 2000);
        }, 1000);
    } else {
        // Message d'erreur cryptique pour ne pas donner d'indices
        questionFeedback.textContent = "V√©rification √©chou√©e";
        questionFeedback.className = "auth-feedback visible error";
        
        // Effet visuel d'erreur
        document.querySelector('.auth-question-form').classList.add('shake');
        setTimeout(() => {
            document.querySelector('.auth-question-form').classList.remove('shake');
        }, 500);
        
        // G√©n√©rer une nouvelle grille apr√®s un d√©lai
        // Reset complet pour √©viter des tentatives par essai-erreur
        setTimeout(() => {
            populateSymbolsGrid();
            personalDateInput.value = '';
            personalPhraseInput.value = '';
            updateProgressBar();
        }, 1500);
    }
});

    
    // Activer la touche Entr√©e pour soumettre
    passwordInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            authButton.click();
        }
    });
    
    personalPhraseInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            verifyIdentityBtn.click();
        }
    });
    
    // Ajouter une animation de classe "shake" pour les erreurs
    const styles = document.createElement('style');
    styles.textContent = `
        .shake {
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
        
        @keyframes shake {
            10%, 90% {
                transform: translate3d(-1px, 0, 0);
            }
            20%, 80% {
                transform: translate3d(2px, 0, 0);
            }
            30%, 50%, 70% {
                transform: translate3d(-3px, 0, 0);
            }
            40%, 60% {
                transform: translate3d(3px, 0, 0);
            }
        }
        
        .auth-input-error {
            border-color: var(--error) !important;
            animation: flash 0.5s;
        }
        
        @keyframes flash {
            0%, 100% { border-color: var(--error); }
            50% { border-color: transparent; }
        }
    `;
    document.head.appendChild(styles);
});

/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üü° JS PARTIE 6
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/

// Fonction pour charger les donn√©es depuis Supabase
async function loadDataFromSupabase() {
    try {
        const { data, error } = await supabase
            .from('elements')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('Erreur lors du chargement des donn√©es:', error);
            return false;
        }
        
        if (data) {
            window.sampleData = data;
            
            // Actualiser l'interface
            populateGrid();
            updateCategoryCounts();
            updateNavOrder();
            console.log('Donn√©es charg√©es avec succ√®s:', data.length, '√©l√©ments');
            return true;
        }
    } catch (error) {
        console.error('Exception lors du chargement des donn√©es:', error);
        return false;
    }
}

// Fonction pour enregistrer un nouvel √©l√©ment dans Supabase
async function saveElementToSupabase(element) {
    try {
        console.log('Tentative d\'enregistrement:', element);
        
        // Assurez-vous que les champs sont correctement format√©s
        const formattedElement = {
            ...element,
            // Assurez-vous que tags et images sont des tableaux JSON valides
            tags: Array.isArray(element.tags) ? element.tags : [],
            images: Array.isArray(element.images) ? element.images : []
        };
        
        const { data, error } = await supabase
            .from('elements')
            .insert([formattedElement])
            .select();
        
        if (error) {
            console.error('Erreur d\'enregistrement:', error);
            return false;
        }
        
        if (data && data.length > 0) {
            console.log('√âl√©ment enregistr√© avec ID:', data[0].id);
            // Mise √† jour de l'√©l√©ment local avec l'ID g√©n√©r√©
            element.id = data[0].id;
            return true;
        } else {
            console.error('Pas de donn√©es retourn√©es apr√®s insertion');
            return false;
        }
    } catch (error) {
        console.error('Exception lors de l\'enregistrement:', error);
        return false;
    }
}

async function syncWithSupabase() {
    try {
        const { data, error } = await supabase
            .from('elements')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('Erreur de synchronisation:', error);
            return false;
        }
        
        if (data) {
            // Mise √† jour des donn√©es locales
            window.sampleData = data;
            
            // Rafra√Æchir l'interface
            populateGrid();
            updateCategoryCounts();
            updateNavOrder();
            console.log('Synchronisation r√©ussie:', data.length, '√©l√©ments');
            return true;
        }
    } catch (error) {
        console.error('Exception lors de la synchronisation:', error);
        return false;
    }
}


// Fonction pour mettre √† jour un √©l√©ment existant
async function updateElementInSupabase(id, updates) {
    try {
        console.log("Mise √† jour de l'√©l√©ment avec ID:", id);
        console.log("Mises √† jour:", updates);
        
        // Assurez-vous que l'ID est au format UUID correct
        if (typeof id !== 'string' || !id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
            console.error('Format d\'ID invalide:', id);
            return false;
        }
        
        const { error } = await supabase
            .from('elements')
            .update(updates)
            .eq('id', id);
        
        if (error) {
            console.error('Erreur lors de la mise √† jour:', error);
            return false;
        }
        
        console.log('√âl√©ment mis √† jour avec succ√®s');
        return true;
    } catch (error) {
        console.error('Erreur lors de la mise √† jour:', error);
        return false;
    }
}


// Fonction pour supprimer un √©l√©ment
async function deleteElementFromSupabase(id) {
    try {
        console.log("Suppression de l'√©l√©ment avec ID:", id);
        
        const { error } = await supabase
            .from('elements')
            .delete()
            .eq('id', id);
        
        if (error) {
            console.error('Erreur lors de la suppression:', error);
            return false;
        }
        
        console.log('√âl√©ment supprim√© avec succ√®s');
        return true;
    } catch (error) {
        console.error('Erreur lors de la suppression:', error);
        return false;
    }
}


// Fonction pour v√©rifier la connexion Supabase
async function testSupabaseConnection() {
    try {
        const { data, error } = await supabase
            .from('elements')
            .select('count(*)');
        
        if (error) {
            console.error('Erreur de connexion Supabase:', error);
            return false;
        }
        
        console.log('Connexion Supabase OK, nombre d\'√©l√©ments:', data[0].count);
        return true;
    } catch (error) {
        console.error('Exception lors du test de connexion:', error);
        return false;
    }
}

// Appelez cette fonction au chargement de la page
document.addEventListener('DOMContentLoaded', async () => {
    // Tester la connexion Supabase
    await testSupabaseConnection();
    
    // Le reste de votre code...
});



//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü§ JS PARTIE 7
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
// PARTIE 1: Fonctions pour g√©rer les conversations dans Supabase

// Fonction pour charger la conversation existante
async function loadConversation(elementId) {
    try {
        const { data, error } = await supabase
            .from('conversations')
            .select('*')
            .eq('element_id', elementId)
            .limit(1);
        
        if (error) {
            console.error('Erreur de chargement de la conversation:', error);
            return null;
        }
        
        if (data && data.length > 0) {
            return data[0];
        } else {
            console.log('Aucune conversation trouv√©e pour cet √©l√©ment');
            return null;
        }
    } catch (error) {
        console.error('Exception lors du chargement de la conversation:', error);
        return null;
    }
}

// Fonction pour cr√©er une nouvelle conversation
async function createConversation(elementId, contactName, contactImage) {
    try {
        const newConversation = {
            element_id: elementId,
            contact_name: contactName,
            contact_image: contactImage,
            messages: []
        };
        
        const { data, error } = await supabase
            .from('conversations')
            .insert([newConversation])
            .select();
        
        if (error) {
            console.error('Erreur de cr√©ation de conversation:', error);
            return null;
        }
        
        if (data && data.length > 0) {
            console.log('Conversation cr√©√©e avec ID:', data[0].id);
            return data[0];
        }
        
        return null;
    } catch (error) {
        console.error('Exception lors de la cr√©ation de la conversation:', error);
        return null;
    }
}

// Fonction pour sauvegarder un message
async function saveMessage(conversationId, message) {
    try {
        // D'abord, r√©cup√©rer les messages existants
        const { data: currentData, error: fetchError } = await supabase
            .from('conversations')
            .select('messages')
            .eq('id', conversationId)
            .single();
        
        if (fetchError) {
            console.error('Erreur de r√©cup√©ration des messages:', fetchError);
            return false;
        }
        
        // Ajouter le nouveau message
        const currentMessages = currentData.messages || [];
        const updatedMessages = [...currentMessages, {
            id: crypto.randomUUID(),
            type: message.type,
            text: message.text,
            images: message.images || [],
            timestamp: new Date().toISOString()
        }];
        
        // Mettre √† jour dans la base de donn√©es
        const { error: updateError } = await supabase
            .from('conversations')
            .update({ 
                messages: updatedMessages,
                updated_at: new Date().toISOString()
            })
            .eq('id', conversationId);
        
        if (updateError) {
            console.error('Erreur de sauvegarde du message:', updateError);
            return false;
        }
        
        console.log('Message sauvegard√© avec succ√®s');
        return true;
    } catch (error) {
        console.error('Exception lors de la sauvegarde du message:', error);
        return false;
    }
}

// Fonction pour r√©cup√©rer l'ID de l'√©l√©ment actuellement affich√©
function getCurrentElementId() {
    // Obtenir l'√©l√©ment actif depuis le DOM ou le stockage temporaire
    const activeCard = document.querySelector('.content-card.active');
    if (activeCard) {
        return activeCard.dataset.id;
    }
    
    // Si aucun √©l√©ment n'est actif, utiliser une valeur stock√©e temporairement
    return window.currentElementId || null;
}

// Variable pour stocker l'ID de la conversation actuelle
let currentConversationId = null;


/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  ‚ö´ JS PARTIE 8
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/
  
  // Fonctions pour g√©rer les notes dans Supabase

// Fonction pour charger le contenu d'une note existante
async function loadNoteContent(elementId) {
    try {
        const { data, error } = await supabase
            .from('notes_content')
            .select('*')
            .eq('element_id', elementId)
            .limit(1);
        
        if (error) {
            console.error('Erreur de chargement du contenu de la note:', error);
            return null;
        }
        
        if (data && data.length > 0) {
            console.log('Contenu de note charg√© avec succ√®s');
            return data[0];
        } else {
            console.log('Aucun contenu trouv√© pour cette note');
            return null;
        }
    } catch (error) {
        console.error('Exception lors du chargement du contenu de la note:', error);
        return null;
    }
}

// Fonction pour cr√©er un nouveau contenu de note
async function createNoteContent(elementId, content = '') {
    try {
        const newNoteContent = {
            element_id: elementId,
            content: content
        };
        
        const { data, error } = await supabase
            .from('notes_content')
            .insert([newNoteContent])
            .select();
        
        if (error) {
            console.error('Erreur de cr√©ation du contenu de note:', error);
            return null;
        }
        
        if (data && data.length > 0) {
            console.log('Contenu de note cr√©√© avec ID:', data[0].id);
            return data[0];
        }
        
        return null;
    } catch (error) {
        console.error('Exception lors de la cr√©ation du contenu de note:', error);
        return null;
    }
}

// Fonction pour sauvegarder le contenu d'une note existante
async function saveNoteContent(elementId, content) {
    try {
        // V√©rifier si un contenu existe d√©j√† pour cette note
        const existingContent = await loadNoteContent(elementId);
        
        if (existingContent) {
            // Mettre √† jour le contenu existant
            const { error } = await supabase
                .from('notes_content')
                .update({ 
                    content: content,
                    updated_at: new Date().toISOString()
                })
                .eq('element_id', elementId);
            
            if (error) {
                console.error('Erreur de mise √† jour du contenu de note:', error);
                return false;
            }
            
            console.log('Contenu de note mis √† jour avec succ√®s');
            return true;
        } else {
            // Cr√©er un nouveau contenu
            const result = await createNoteContent(elementId, content);
            return result !== null;
        }
    } catch (error) {
        console.error('Exception lors de la sauvegarde du contenu de note:', error);
        return false;
    }
}

// Fonction pour la sauvegarde manuelle
async function saveNoteManually() {
    if (window.editorInstance && window.currentElementId) {
        const content = window.editorInstance.value;
        const success = await saveNoteContent(window.currentElementId, content);
        
        if (success) {
            // Afficher un message de confirmation
            const notification = document.createElement('div');
            notification.className = 'save-notification';
            notification.textContent = 'Note sauvegard√©e avec succ√®s';
            document.querySelector('.editor-container').appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 2000);
        }
    }
}

//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü© JS PARTIE 9
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

// Charger la structure du dossier depuis Supabase
async function loadFolderStructure(elementId) {
    try {
        // V√©rifier si nous avons un √©l√©ment de d√©monstration
        if (elementId.startsWith('demo-')) {
            // Pour les √©l√©ments de d√©monstration, utiliser les donn√©es locales
            folders = window.demoDossiers?.[elementId] || [];
            return;
        }
        
        console.log("Chargement de la structure de dossier pour l'√©l√©ment:", elementId);
        
        // R√©cup√©rer les donn√©es depuis Supabase
        const { data, error } = await supabase
            .from('folders_content')
            .select('folder_structure')
            .eq('element_id', elementId)
            .limit(1);
        
        if (error) {
            console.error('Erreur lors du chargement de la structure du dossier:', error);
            folders = [];
            return;
        }
        
        if (data && data.length > 0) {
            // Structure existante trouv√©e
            folders = data[0].folder_structure;
            console.log("Structure de dossier charg√©e:", folders);
        } else {
            // Aucune structure trouv√©e, initialiser un tableau vide
            folders = [];
            console.log("Aucune structure de dossier trouv√©e, initialisation avec un tableau vide");
            // Cr√©er une entr√©e vide dans la base de donn√©es
            await createFolderStructure(elementId);
        }
    } catch (error) {
        console.error('Exception lors du chargement de la structure du dossier:', error);
        folders = [];
    }
}

// Cr√©er une nouvelle structure de dossier
async function createFolderStructure(elementId) {
    try {
        if (elementId.startsWith('demo-')) {
            // Pour les √©l√©ments de d√©monstration, stocker localement
            if (!window.demoDossiers) window.demoDossiers = {};
            window.demoDossiers[elementId] = folders;
            return true;
        }
        
        const { data, error } = await supabase
            .from('folders_content')
            .insert([{
                element_id: elementId,
                folder_structure: folders
            }])
            .select();
        
        if (error) {
            console.error("Erreur lors de la cr√©ation de la structure de dossier:", error);
            return false;
        }
        
        console.log("Structure de dossier cr√©√©e avec succ√®s");
        return true;
    } catch (error) {
        console.error("Exception lors de la cr√©ation de la structure de dossier:", error);
        return false;
    }
}

// Sauvegarder la structure du dossier
async function saveFolderStructure(elementId) {
    try {
        if (elementId.startsWith('demo-')) {
            // Pour les √©l√©ments de d√©monstration, stocker localement
            if (!window.demoDossiers) window.demoDossiers = {};
            window.demoDossiers[elementId] = folders;
            return true;
        }
        
        // V√©rifier si une entr√©e existe d√©j√†
        const { data, error: checkError } = await supabase
            .from('folders_content')
            .select('id')
            .eq('element_id', elementId)
            .limit(1);
        
        if (checkError) {
            console.error("Erreur lors de la v√©rification de la structure existante:", checkError);
            return false;
        }
        
        if (data && data.length > 0) {
            // Mettre √† jour la structure existante
            const { error: updateError } = await supabase
                .from('folders_content')
                .update({
                    folder_structure: folders,
                    updated_at: new Date().toISOString()
                })
                .eq('element_id', elementId);
            
            if (updateError) {
                console.error("Erreur lors de la mise √† jour de la structure de dossier:", updateError);
                return false;
            }
        } else {
            // Cr√©er une nouvelle entr√©e
            return await createFolderStructure(elementId);
        }
        
        console.log("Structure de dossier sauvegard√©e avec succ√®s");
        return true;
    } catch (error) {
        console.error("Exception lors de la sauvegarde de la structure de dossier:", error);
        return false;
    }
}


/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üü¶ JS PARTIE 10
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/


//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü™ JS PARTIE 11
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üüß JS PARTIE 12
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/


//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü• JS PARTIE 13
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üü® JS PARTIE 14
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*/


//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// üü© JS PARTIE 15
//‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù